! Module file: pmprint
!
! CNS MODULE
! **********
!
! Authors: Gregory L. Warren and Axel T. Brunger
!
! copyright Yale University
!
! version 04/03/98
!
! Function:
!          print statistics on coordinates from 
!          probability map refinement
!
! Requirements:
!
!

module {pmprint}
(
   &cv=cv;                   {INPUT/OUTPUT: cross validation values}
   &flag=flag;               {INPUT: true false flags}
   &md=md;                   {INPUT: md parameters}
   &nmr=nmr;                 {INPUT: nmr restraints parameters}
   &num=num;                 {INPUT: number of nmr restraints}
   &output=output;           {INPUT/OUTPUT: nmr values}
   &pdb=pdb;                 {INPUT: coordinate parameters}
)

checkversion 1.3

set message ? end
evaluate ($message_old=$result)
set echo ? end
evaluate ($echo_old=$result)
if ( $log_level = verbose ) then
  set echo=on message=normal end
else
  set echo=off message=off end
end if

   evaluate ( $accept = 0 )
	
{- BOND Data Analysis -}
   print thres=0.05 bond 
   evaluate ($prt.bond.5.viol=$violations)
   evaluate ($prt.bond.rms=$rms)

 {===> no rms for bond > 0.01 acceptance criterion }
   if ($prt.bond.rms > 0.01) then evaluate ($accept=$accept + 1 ) end if
	
{- ANGLE Data Analysis -}
   print thres=5.0 angle 
   evaluate ($prt.angl.5.viol=$violations)
   evaluate ($prt.angl.rms = $rms)

 {===> no rms for angl > 1.0 acceptance criterion }
   if ($prt.angl.rms > 1.0) then evaluate ($accept=$accept + 1 ) end if
	
{- impr Data Analysis -}
   print thres=5.0 impr 
   evaluate ($prt.impr.5.viol=$violations)
   evaluate ($prt.impr.rms = $rms)

 {===> no rms for impr > 1.0 acceptance criterion }
   if ($prt.impr.rms > 1.0) then evaluate ($accept=$accept+1) end if
	
{- DIHEDRAL Data Analysis -}
   print thres=30.0 dihed 
   evaluate ($prt.dihe.5.viol=$violations)
   evaluate ($prt.dihe.rms = $rms)

{- NOE Data Analysis -}
   noe print threshold = 0.5 end
   evaluate ($prt.noe.5.viol = $violations)
   noe print threshold = 0.2 end
   evaluate ($prt.noe.2.viol = $violations)
   evaluate ($prt.noe.rms = $rms)

 {===> no NOE violations > 0.5 acceptance criterion }
   if (&flag.cv.noe=true) then
      evaluate (&num.noe = $number)
      evaluate (&cv.noe.test.viol=$test_violations)
      evaluate (&cv.noe.test.rms=$test_rms)
      evaluate ($prt.noe.test.viol=$test_violations)
      evaluate ($prt.noe.test.rms=$test_rms)
   elseif ($prt.noe.5.viol > 0) then 
      evaluate ($accept=$accept + 1 ) 
      evaluate (&cv.noe.test.viol=0.)
      evaluate (&cv.noe.test.rms=0.)
      evaluate ($prt.noe.test.viol=0.)
      evaluate ($prt.noe.test.rms=0.)
   else
      evaluate (&cv.noe.test.viol=0.)
      evaluate (&cv.noe.test.rms=0.)
      evaluate ($prt.noe.test.viol=0.)
      evaluate ($prt.noe.test.rms=0.)
   end if
	
{- J-coupling Data Analysis -}
   couplings print threshold 1.0 all end
   evaluate ($prt.coup.viol.1 = $violations)
   couplings print threshold 0.2 all end
   evaluate ($prt.coup.viol.2 = $violations)
   evaluate ($prt.coup.rms = $rms)
   if (&flag.cv.coup=true) then
      evaluate (&num.coup = $number)
      evaluate (&cv.coup.test.viol=$test_violations)
      evaluate (&cv.coup.test.rms=$test_rms)
      evaluate ($prt.coup.test.viol=$test_violations)
      evaluate ($prt.coup.test.rms=$test_rms)
   else
      evaluate (&cv.coup.test.viol=0.)
      evaluate (&cv.coup.test.rms=0.)
      evaluate ($prt.coup.test.viol=0.)
      evaluate ($prt.coup.test.rms=0.)
   end if

{- 1-bond heteronuclear J-coupling Data Analysis -}
   onebond print threshold 0.1 end
   evaluate ($prt.oneb.viol = $violations)
   evaluate ($prt.oneb.rms = $rms)
   
{- Carbon chemical shift Data Analysis -}
   carbon print threshold = 1.0 end  
   evaluate ($prt.carb.viol = $violations)
   evaluate ($prt.carb.a.rms = $rmsca)
   evaluate ($prt.carb.b.rms = $rmscb)

{- Proton chemical shift Data Analysis -}
   prot print threshold 0.3 all normsd end
   evaluate ($prt.prot.all.viol = $violations)
   evaluate ($prt.prot.all.rms = $rms)

   evaluate ($count = 1)
   while (&exist%nmr.prot.file.$count=true) loop nloop
      evaluate ($clsname = "P"+encode($count))
      if (&nmr.prot.file.$count # "") then
         prot print threshold &nmr.prot.thresh.$count class $$clsname normsd end
         evaluate ($prt.prot.$clsname.viol = $violations)
         evaluate ($prt.prot.$clsname.rms = $rms)
      else
         evaluate ($prt.prot.$clsname.viol = 0)
         evaluate ($prt.prot.$clsname.rms = 0)
      end if
      evaluate ($count = $count + 1)
   end loop nloop

{- CDIH Data Analysis -}
   print threshold = 5.0 cdih 
   evaluate ($prt.cdih.5.viol = $violations)
   print threshold = 2.0 cdih 
   evaluate ($prt.cdih.2.viol = $violations)
   evaluate ($prt.cdih.rms = $rms)
   
 {===> no dihedral angle violations > 5 acceptance criterion }
   if (&flag.cv.cdih=true) then
      evaluate (&num.cdih = $number)
      evaluate (&cv.cdih.test.viol=$test_violations)
      evaluate (&cv.cdih.test.rms=$test_rms)
      evaluate ($prt.cdih.test.viol=$test_violations)
      evaluate ($prt.cdih.test.rms=$test_rms)
   elseif ($prt.cdih.5.viol > 0) then 
      evaluate ( $accept = $accept + 1 ) 
      evaluate (&cv.cdih.test.viol=0.)
      evaluate (&cv.cdih.test.rms=0.)
      evaluate ($prt.cdih.test.viol=0.)
      evaluate ($prt.cdih.test.rms=0.)
   else
      evaluate (&cv.cdih.test.viol=0.)
      evaluate (&cv.cdih.test.rms=0.)
      evaluate ($prt.cdih.test.viol=0.)
      evaluate ($prt.cdih.test.rms=0.)
   end if
	
{- ENERGY Data Analysis -}
   if (&num.dani > 0.) then
      if (&nmr.dani.axis = "fixed" ) then
         flags exclude harm end
         evaluate ($harm=0.)
      end if
   elseif (&num.sani > 0.) then
      if (&nmr.sani.axis = "fixed" ) then
         flags exclude harm end
         evaluate ($harm=0.)
      end if
   else
      flags exclude harm end
      evaluate ($harm=0.)
   end if

   if (&output.nucl.num < 1) then
      flags exclude elec end
      evaluate ($elec=0.)
   else
      evaluate ($elec=0.)
   end if

   flag include xref end
   parameter  nbond wmin=1.6 end end
   energy end
   parameter  nbond wmin=0.01 end end      

{- VDW Data Analysis -}
   evaluate ($prt.vdw.viol = $violations)
   
{- refinement information for coordinate header -}

   evaluate ($cooltime=&md.xray.cool.step*&md.xray.cool.ss)
   evaluate ($carttime=&md.nmr.cool.step*&md.nmr.cool.ss)
   evaluate ($md_schem=&md.xray.type.cool+"; "+&md.nmr.type.cool+"; minimize")
   evaluate ($cool_func="temp: "+encode(&md.xray.cool.temp)+"->300 steps: "+encode(&md.xray.cool.step)
                       +" time(ps): "+encode($cooltime)+" temp step: "+encode(&md.xray.cool.tmpstp))
   evaluate ($cart_func="temp: "+encode(&md.nmr.cool.temp)+"->0 steps: "+encode(&md.nmr.cool.step)
                        +" time(ps): "+encode($carttime)+" temp step: "+encode(&md.nmr.cool.tmpstp))
   evaluate ($noe_scale=&md.nmr.cool.noe)
   evaluate ($cdih_scale=&md.nmr.cool.cdih)

   evaluate ($noeave="NA")
   if (&output.noe.class.num > 0) then
      evaluate ($noeave="")
      evaluate ($count=1)
      while (&exist%nmr.noe.file.$count=true) loop chk
   	 if (&nmr.noe.file.$count # "") then
   	    evaluate ($noeave=$noeave+&nmr.noe.ave.mode.$count+", ")
   	 end if
   	 evaluate ($count=$count+1)
      end loop chk
      if (&nmr.noe.hbnd.file # "" ) then
   	 evaluate ($noeave=$noeave+"hbnd: "+&nmr.noe.ave.mode.hbnd)
      end if
   end if

   evaluate ($jcoup_scale="NA")
   if (&output.jcoup.class.num > 0) then
      evaluate ($jcoup_scale="")
      evaluate ($count=1)
      while (&exist%nmr.jcoup.file.$count=true) loop chk
   	 if (&nmr.jcoup.file.$count # "") then
   	    if (&&nmr.jcoup.force.2.$count=0) then
   	       evaluate ($jcoup_scale=$jcoup_scale+encode(&nmr.jcoup.force.1.$count)+", ")
   	    else
   	       evaluate ($jcoup_scale=$jcoup_scale+encode(&nmr.jcoup.force.1.$count)
   	                              +" "+encode(&nmr.jcoup.force.2.$count)+", ")
   	    end if
   	 end if
   	 evaluate ($count=$count+1)
      end loop chk
   end if

   evaluate ($oneb_scale="NA")
   if (&output.oneb.class.num > 0) then
      evaluate ($oneb_scale="")
      evaluate ($count=1)
      while (&exist%nmr.oneb.file.$count=true) loop chk
   	 if (&nmr.oneb.file.$count # "") then
   	    evaluate ($oneb_scale=$oneb_scale+encode(&nmr.oneb.force.$count)+", ")
   	 end if
   	 evaluate ($count=$count+1)
      end loop chk
   end if

   evaluate ($carb_scale="NA")
   if (&output.carb.class.num > 0) then
      evaluate ($carb_scale="")
      evaluate ($count=1)
      while (&exist%nmr.carb.file.$count=true) loop chk
   	 if (&nmr.carb.file.$count # "") then
   	    evaluate ($carb_scale=$carb_scale+encode(&nmr.carb.force.$count)+", ")
   	 end if
   	 evaluate ($count=$count+1)
      end loop chk
   end if

   evaluate ($prot_scale="NA")
   if (&output.prot.class.num > 0) then
      evaluate ($prot_scale="")
      evaluate ($count=1)
      while (&exist%nmr.prot.file.$count=true) loop chk
   	 if (&nmr.prot.file.$count # "") then
   	    if (&nmr.prot.force.2.$count=0) then
   	       evaluate ($prot_scale=$prot_scale+encode(&nmr.prot.force.1.$count)+", ")
   	    else
   	       evaluate ($prot_scale=$prot_scale+encode(&nmr.prot.force.1.$count)
   	                             +" "+encode(&nmr.prot.force.2.$count)+", ")
   	    end if
   	 end if
   	 evaluate ($count=$count+1)
      end loop chk
   end if

   if (&nmr.plan.file = "") then
      evaluate ($pscale = "NA")
   else
      evaluate ($pscale = &nmr.plan.scale)
   end if

   if (&nmr.ncs.file # "") then
      evaluate ($ncs_flag = "used.")
   elseif (&nmr.ens.multi.symm=true) then
      evaluate ($ncs_flag = "used.")
   else
      evaluate ($ncs_flag = "not used.")
   end if
   
{- format header by storing in buffers prthead, prtviol, prtener -}

if ($accept = 0) then
   buffer prthead
      reset
      display The macromolecule has &output.rsn.num residues
      display Using &output.copies models for multi-conformer refinement
      display with &nmr.ens.coor.num coordinate copies
      display This is an accepted structure
   end
else
   buffer prthead
      reset
      display The macromolecule has &output.rsn.num residues
      display Using &output.copies models for multi-conformer refinement
      display with &nmr.ens.coor.num coordinate copies
      display This is not an accepted structure
   end
end if

buffer prthead
   display Molecular dynamics scheme : $md_schem 
   display 1st xray cooling stage    :
   display      $cool_func
   display 2nd nmr/xray cooling stage: 
   display      $cart_func
   display &num.noe NOEs in &output.noe.class.num class(es) with scale factor of $noe_scale
   display      averaging function(s): $noeave
   display &num.coup 3-bond j-couplings in &output.jcoup.class.num class(es) with 
   display      scale factor(s) of $jcoup_scale
   display &num.oneb 1-bond j-couplings in &output.oneb.class.num class(es) with
   display      scale factor(s) of $oneb_scale
   display &num.carb carbon chemical shifts in &output.carb.class.num class(es) with
   display      scale factor(s) of $carb_scale
   display &num.prot.all proton chemical shifts in &output.prot.class.num class(es) with
   display      scale factor(s) of $prot_scale
   display &num.cdih dihedral restraints with scale factor of $cdih_scale
   display &num.plan planarity restraints with a scale factor of $pscale
   display NCS restraints $ncs_flag
end

buffer prtviol
   reset
   display           viol    rmsd   
   display Bond   : $prt.bond.5.viol[I5]    $prt.bond.rms[F6.4]
   display Angl   : $prt.angl.5.viol[I5]   $prt.angl.rms[F6.3]
   display Impr   : $prt.impr.5.viol[I5]   $prt.impr.rms[F6.3]
   display VDW    : $prt.vdw.viol[I5]
   display Dihed  : $prt.dihe.5.viol[I5]   $prt.dihe.rms[F6.3]
   display =============================================================== 
   display           viol   rmsd    viol2   
   display NOE    : $prt.noe.5.viol[I5]  $prt.noe.rms[F6.3]  $prt.noe.2.viol[I5]
   display cdih   : $prt.cdih.5.viol[I5]  $prt.cdih.rms[F6.3]  $prt.cdih.2.viol[I5]
   display J-coup : $prt.coup.viol.1[I5]  $prt.coup.rms[F6.3]  $prt.coup.viol.2[I5]
   display Oneb   : $prt.oneb.viol[I5]  $prt.oneb.rms[F6.3]
   display =============================================================== 
   display           viol   rmsd A   rmsd B 
   display Carb   : $prt.carb.viol[I5]  $prt.carb.a.rms[F6.3]   $prt.carb.b.rms[F6.3]
   display =============================================================== 
   display Protons       violations,  rmsd 
   display all    :      $prt.prot.all.viol[I6]      $prt.prot.all.rms[F6.3]
   display class 1:      $prt.prot.P1.viol[I6]      $prt.prot.P1.rms[F6.3]
   display class 2:      $prt.prot.P2.viol[I6]      $prt.prot.P2.rms[F6.3]
   display class 3:      $prt.prot.P3.viol[I6]      $prt.prot.P3.rms[F6.3]
   display class 4:      $prt.prot.P4.viol[I6]      $prt.prot.P4.rms[F6.3]
   display ===============================================================
   display Final probability map R values     
   display      R: $r[F6.3]          
   display free R: $test_r[F6.3]
end
   
buffer prtener
   reset
   display overall = $ENER 
   display bon     = $BOND
   display ang     = $ANGL
   display imp     = $IMPR
   display vdw     = $VDW
end

if (&output.nucl.num >0) then
   buffer prtener
      display dihed   = $DIHE
      display elect   = $ELEC
      display harm    = $HARM
      display xray    = $XREF
      display noe     = $NOE
      display coup    = $COUP
      display oneb    = $ONEB
      display carb    = $CARB
      display prot    = $PROT
      display cdih    = $CDIH
      display plan    = $PLAN
      display ncs     = $NCS
   end
else
   buffer prtener
      display harm    = $HARM
      display xray    = $XREF
      display noe     = $NOE
      display coup    = $COUP
      display oneb    = $ONEB
      display carb    = $CARB
      display prot    = $PROT
      display cdih    = $CDIH
      display ncs     = $NCS
   end
end if

{- print remarks header and coordinates -}

set remarks=reset end
set remarks=accu end

buffer prthead
   to remarks
   flush
end
remarks =============================================================== 
buffer prtviol
   to remarks
   flush
end
remarks =============================================================== 
buffer prtener
   to remarks
   flush
end
remarks =============================================================== 
	
evaluate ($trialname=&pdb.out.name+"_"+encode(&output.copies)+"_pm.pdb")
write coordinates output=$trialname format=PDBO end

set remarks=reset end

set message=$message_old echo=$echo_old end
