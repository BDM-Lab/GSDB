evaluate <evaluate-statement>

<evaluate-statement> :==

  ( <symbol> = <evaluate-expression> )

  <evaluate-expression> :==

    <vflc> [ <operator> <evaluate-expression> ]

    <vflc> :==
 
      <function>|<symbol>|<parameter>|<literal-constant>

      <function> :==        

        abs(<evaluate-expression>)
        acos(<evaluate-expression>)
        asin(<evaluate-expression>)
        cos(<evaluate-expression>)
        exp(<evaluate-expression>)
        gaussian(<evaluate-expression>)
        step(<evaluate-expression>)
        integer(<evaluate-expression>)
        log(<evaluate-expression>)
        log10(<evaluate-expression>)
        maximum(<evaluate-expression>{,<evaluate-expression>})
        minimum(<evaluate-expression>{,<evaluate-expression>})
        mod(<evaluate-expression>,<evaluate-expression>)
        norm(<evaluate-expression>)
        random()
        sign(<evaluate-expression>)
        sin(<evaluate-expression>)
        sqrt(<evaluate-expression>)
        tan(<evaluate-expression>)

        --{String functions:}
        --{=================}
        decode(string) --{convert 4-char Hybrid-36 string to integer.}
        encode(<atom-expression>) --{convert integer to character string.}
        capitalize(string) --{convert string to all upper-case.}
        len(string)  --{integer: string length.}
        substr(string,start,end) --{substring as Fortran "string(start:end)"; negative start or end means count from the end of the string+1}
        index(string,substring) --{integer: first occurrance of substring in string or 0}
        rindex(string,substring) --{integer: last occurrance of substring in string or 0}
        format(fmt_string,<any>) --{formated string as with to DISPlay formatting.}
        adustl(string) --{left-justify string; length stays the same.}
        trim(string) --{remove trailing blanks from string.}
        match(pattern,string) --{logical: TRUE if string matches wildcard pattern.}

    <operator> :==
        
      + | - | ~ | * | / | ^ | **
