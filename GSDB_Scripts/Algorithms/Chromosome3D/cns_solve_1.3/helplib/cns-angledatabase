angledatabase {<angledatabase-statement>} end

<angledatabase-statement> :==

  assign <atom-selection> <atom-selection> <atom-selection> <atom-selection>
         <atom-selection> <atom-selection> <atom-selection> <atom-selection>
         <atom-selection> <atom-selection> <atom-selection>[<atom-selection>]
  --{Add an entry to the current class. Selections define the 
     dihedral angles for that entry.}
  class=<classname>
  --{Starts a new class. Applies to all assignment, expectation, 
     force, and size entries until another class entry is issued.}
  derivflag=on|off
  --{Turns derivatives with respect to phi and psi on or off.}
  expectation <integer> <integer> <real>
  --{Indicates coordinates in the expectation grid and the value 
     of that point.}
  error=<real>
  --{Set the square well error for the current class (in expectation units).}
  forceconstant=<real> 
  --{Force constant for all assignments in the current class.
     Default = 1}
  nrestraints=<integer>
  --{Number of slots for angle database restraints to allocate 
     in memory. Default = 200}
  potential=square|harmonic
  --{Use errors or not.}
  print threshold <real> all|class=<classname>
  --{Prints angle database violations greater than the specified value
     for all classes or just for the named class.}
  reset
  --{Erases the angle database assignment table.}
  size angle|dihedral <integer> <integer> 
  --{Defines the type of the third angle in the current class expectation
     grid and the number of steps along each dimension.}
  zero
  --{Zero out the all the expectation value arrays.}
