<atom-expression> :==

  <vflc> [ <operator> <atom-expression> ]

  <vflc> :==
 
    <atom-object>|<function>|<symbol>|<parameter>|<literal-constant>

    <function> :==        

      abs(<atom-expression>)
      acos(<atom-expression>)
      asin(<atom-expression>)
      cos(<atom-expression>)
      exp(<atom-expression>)
      gaussian(<atom-expression>)
      step(<atom-expression>)
      integer(<atom-expression>)
      log(<atom-expression>)
      log10(<atom-expression>)
      maximum(<atom-expression>{,<atom-expression>})
      maxwell(<atom-expression>)
      minimum(<atom-expression>{,<atom-expression>})
      mod(<atom-expression>,<atom-expression>)
      random()
      sign(<atom-expression>)
      sin(<atom-expression>)
      sqrt(<atom-expression>)
      tan(<atom-expression>)

      --{String functions:}
      --{=================}
      decode(string) --{convert character string to integer.}
      encode(<atom-expression>) --{convert integer to 4-char Hybrid-36 string.}
      capitalize(string) --{convert string to all upper-case.}
      len(string)  --{integer: string length.}
      substr(string,start,end) --{substring as Fortran "string(start:end)"; negative start or end means count from the end of the string+1}
      index(string,substring) --{integer: first occurrance of substring in string or 0}
      rindex(string,substring) --{integer: last occurrance of substring in string or 0}
      format(fmt_string,<any>) --{formated string as with to DISPlay formatting.}
      adustl(string) --{left-justify string; length stays the same.}
      trim(string) --{remove trailing blanks from string.}
      match(pattern,string) --{logical: TRUE if string matches wildcard pattern.}

  <operator> :==
        
    + | - | ~ | * | / | ^ | **
