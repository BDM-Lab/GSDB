{+ file: difference_distance.inp +}
{+ directory: general +}
{+ description: Calculate a difference distance matrix between 2 structures +}
{+ comment: 
            outputs a Mathematica matrix of differences in
            distances between the 2 structures +}
{+ authors: Axel T. Brunger, and Paul D. Adams +}
{+ copyright: Yale University +}

{- Guidelines for using this file:
   - all strings must be quoted by double-quotes
   - logical variables (true/false) are not quoted
   - do not remove any evaluate statements from the file -}

{- begin block parameter definition -} define(

{============================ coordinates ============================}

{* coordinate file *}
{===>} coordinate_infile="amy_anneal.pdb";

{* reference coordinate file *}
{===>} comp_coordinate_infile="amy.pdb";

{==================== molecular information ==========================}

{* topology files *}
{===>} topology_infile_1="CNS_TOPPAR:protein.top";
{===>} topology_infile_2="CNS_TOPPAR:dna-rna.top";
{===>} topology_infile_3="CNS_TOPPAR:water.top";
{===>} topology_infile_4="CNS_TOPPAR:ion.top";
{===>} topology_infile_5="CNS_TOPPAR:carbohydrate.top";
{===>} topology_infile_6="";
{===>} topology_infile_7="";
{===>} topology_infile_8="";

{* linkage files for linear, continuous polymers (protein, DNA, RNA) *}
{===>} link_infile_1="CNS_TOPPAR:protein.link";
{===>} link_infile_2="CNS_TOPPAR:dna-rna-pho.link";
{===>} link_infile_3="";

{* parameter files *}
{===>} parameter_infile_1="CNS_TOPPAR:protein_rep.param";
{===>} parameter_infile_2="CNS_TOPPAR:dna-rna_rep.param";
{===>} parameter_infile_3="CNS_TOPPAR:water_rep.param";
{===>} parameter_infile_4="CNS_TOPPAR:ion.param";
{===>} parameter_infile_5="CNS_TOPPAR:carbohydrate.param";
{===>} parameter_infile_6="";
{===>} parameter_infile_7="";
{===>} parameter_infile_8="";

{* molecular topology file: optional (leave blank for auto generation) *}
{* 
   Auto generation of the molecular topology from the coordinates should only 
   be used if:
   (1) Each distinct protein, DNA, or RNA chain must have a separate segid 
       (or chainid if the chainid is non-blank). 
   (2) Each contiguous protein, RNA, or RNA chain must not be disrupted by 
       other types of residues or ligands.  Rather, these other residues 
       should be listed after protein, RNA/DNA chains. 
   (3) Disulphides are automatically detected based on distances between the sulfur atoms
      (must be less than 3 A apart).
   (4) Broken protein/RNA/DNA chains without terminii must be more than 2.5 A apart to be recognized as such.
   (5) N-linked glycan links are automatically recognized if the bonded atoms are less than 2.5 A apart.
   (6) Automatic generation cannot be used with alternate conformations. 
   For ligands, the user must make suitable topology and parameter files.
   For non-standard covalent linkages, the custom patch file should be used.
   Alternatively, the generate.inp or generate_easy.inp task files
   can be used to generated the mtf prior to running this task file.
    *}
{===>} structure_infile="amy.mtf";

{* for auto generation: extra linkages and modifications by custom patches *}
{===>} patch_infile="";

{========================== atom selection ===========================}

{* select atoms to be included in calculation *}
{===>} atom_select=(known and not hydrogen);

{* select atom type to calculate distances between *}
{* typically this will be CA for proteins or P for DNA/RNA *}
{===>} atom_type=(name CA);

{=========================== output files ============================}

{* output listing file *}
{===>} list_outfile="difference_distance.list";

{===========================================================================}
{        things below this line do not normally need to be changed          }
{===========================================================================}

 ) {- end block parameter definition -}

 checkversion 1.3

 evaluate ($log_level=quiet)

 if ( $log_level = verbose ) then
   set message=normal echo=on end
 else
   set message=off echo=off end
 end if

 if ( &BLANK%structure_infile = true ) then
 
    {- read topology files -}
    topology
     evaluate ($counter=1)
     evaluate ($done=false)
     while ( $done = false ) loop read
      if ( &exist_topology_infile_$counter = true ) then
         if ( &BLANK%topology_infile_$counter = false ) then
            @@&topology_infile_$counter
         end if
      else
        evaluate ($done=true)
      end if
      evaluate ($counter=$counter+1)
     end loop read
    end
    
    @CNS_XTALMODULE:mtfautogenerate (
                                  coordinate_infile=&coordinate_infile;
                                  convert=true;
                                  separate=true;
                                  atom_delete=(not known);
                                  hydrogen_flag=true;
                                  break_cutoff=2.5;
                                  disulphide_dist=3.0;
                                  carbo_dist=2.5;
                                  patch_infile=&patch_infile;
                                  O5_becomes="O";
                                 )

 else

   structure @&structure_infile end
   coordinates @&coordinate_infile

 end if

 {- read parameter files -}
 parameter
  evaluate ($counter=1)
  evaluate ($done=false)
  while ( $done = false ) loop read
   if ( &exist_parameter_infile_$counter = true ) then
      if ( &BLANK%parameter_infile_$counter = false ) then
         @@&parameter_infile_$counter
      end if
   else
     evaluate ($done=true)
   end if
   evaluate ($counter=$counter+1)
  end loop read
 end

 set message=normal echo=on end
 
 coordinates disp=comp @&comp_coordinate_infile


 set display=&list_outfile end

 display (* Difference distance matrix between 2 structures: *)
 display (*   main coordinate set= &STRIP%main_coordinate_infile *)
 display (*   reference coordinate set= &STRIP%comp_coordinate_infile *)
 display

 display matrix={

 set message=off end
 set echo=off end

 evaluate ($first=true)

 for $id in id ( &atom_select and &atom_type ) loop ca1

   if ( $first = true ) then
     display {
     evaluate ($first=false)
   else
     display ,{
   end if

   show (segid) (id $id)
   evaluate ($segid1=$result)
   show (resid) (id $id)
   evaluate ($resid1=$result)

   show (x) (id $id)
   evaluate ($xm1=$result)
   show (y) (id $id)
   evaluate ($ym1=$result)
   show (z) (id $id)
   evaluate ($zm1=$result)

   show (xcomp) (id $id)
   evaluate ($xc1=$result)
   show (ycomp) (id $id)
   evaluate ($yc1=$result)
   show (zcomp) (id $id)
   evaluate ($zc1=$result)
   
   evaluate ($flag=true)

   for $id in id ( &atom_select and &atom_type ) loop ca2

     show (segid) (id $id)
     evaluate ($segid2=$result)
     show (resid) (id $id)
     evaluate ($resid2=$result)

     show (x) (id $id)
     evaluate ($xm2=$result)
     show (y) (id $id)
     evaluate ($ym2=$result)
     show (z) (id $id)
     evaluate ($zm2=$result)

     show (xcomp) (id $id)
     evaluate ($xc2=$result)
     show (ycomp) (id $id)
     evaluate ($yc2=$result)
     show (zcomp) (id $id)
     evaluate ($zc2=$result)

     evaluate ($dist1=sqrt(($xm2-$xm1)^2+($ym2-$ym1)^2+($zm2-$zm1)^2))

     evaluate ($dist2=sqrt(($xc2-$xc1)^2+($yc2-$yc1)^2+($zc2-$zc1)^2))

     evaluate ($diff=$dist1-$dist2)
   
     if ( $flag = true ) then
       display $diff[f8.4]
       evaluate ($flag=false)
     else
       display , $diff[f8.4]
     end if

   end loop ca2

   display }

 end loop ca1

 display };

 stop
