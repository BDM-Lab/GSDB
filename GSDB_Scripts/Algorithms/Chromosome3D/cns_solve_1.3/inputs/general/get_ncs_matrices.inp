{+ file: get_ncs_matrices.inp +}
{+ directory: general +}
{+ description: Determine NCS operators between molecules +}
{+ comment: 
           Uses the current coordinates to determine the NCS
           operators between molecules. +}
{+ authors: Axel T. Brunger, and Paul D. Adams +}
{+ copyright: Yale University +}

{- Guidelines for using this file:
   - all strings must be quoted by double-quotes
   - logical variables (true/false) are not quoted
   - do not remove any evaluate statements from the file -}

{- begin block parameter definition -} define(

{============================ coordinates ============================}

{* coordinate file *}
{===>} coordinate_infile="eg1_dimer.pdb";

{==================== molecular information ==========================}

{* topology files *}
{===>} topology_infile_1="CNS_TOPPAR:protein.top";
{===>} topology_infile_2="CNS_TOPPAR:dna-rna.top";
{===>} topology_infile_3="CNS_TOPPAR:water.top";
{===>} topology_infile_4="CNS_TOPPAR:ion.top";
{===>} topology_infile_5="CNS_TOPPAR:carbohydrate.top";
{===>} topology_infile_6="";
{===>} topology_infile_7="";
{===>} topology_infile_8="";

{* linkage files for linear, continuous polymers (protein, DNA, RNA) *}
{===>} link_infile_1="CNS_TOPPAR:protein.link";
{===>} link_infile_2="CNS_TOPPAR:dna-rna-pho.link";
{===>} link_infile_3="";

{* parameter files *}
{===>} parameter_infile_1="CNS_TOPPAR:protein_rep.param";
{===>} parameter_infile_2="CNS_TOPPAR:dna-rna_rep.param";
{===>} parameter_infile_3="CNS_TOPPAR:water_rep.param";
{===>} parameter_infile_4="CNS_TOPPAR:ion.param";
{===>} parameter_infile_5="CNS_TOPPAR:carbohydrate.param";
{===>} parameter_infile_6="";
{===>} parameter_infile_7="";
{===>} parameter_infile_8="";

{* molecular topology file: optional (leave blank for auto generation) *}
{* 
   Auto generation of the molecular topology from the coordinates should only 
   be used if:
   (1) Each distinct protein, DNA, or RNA chain must have a separate segid 
       (or chainid if the chainid is non-blank). 
   (2) Each contiguous protein, RNA, or RNA chain must not be disrupted by 
       other types of residues or ligands.  Rather, these other residues 
       should be listed after protein, RNA/DNA chains. 
   (3) Disulphides are automatically detected based on distances between the sulfur atoms
      (must be less than 3 A apart).
   (4) Broken protein/RNA/DNA chains without terminii must be more than 2.5 A apart to be recognized as such.
   (5) N-linked glycan links are automatically recognized if the bonded atoms are less than 2.5 A apart.
   (6) Automatic generation cannot be used with alternate conformations. 
   For ligands, the user must make suitable topology and parameter files.
   For non-standard covalent linkages, the custom patch file should be used.
   Alternatively, the generate.inp or generate_easy.inp task files
   can be used to generated the mtf prior to running this task file.
    *}
{===>} structure_infile="eg1_dimer.mtf";

{* for auto generation: extra linkages and modifications by custom patches *}
{===>} patch_infile="";

{========================== atom selection ===========================}

{* select atoms in primary (reference) molecule *}
{===>} atom_ref=(segid AAAA and name CA);

{* select atoms in NCS related molecule (use none if not used) *}
{===>} atom_ncs_1=(segid CCCC and name CA);

{* select atoms in NCS related molecule (use none if not used) *}
{===>} atom_ncs_2=(none);

{* select atoms in NCS related molecule (use none if not used) *}
{===>} atom_ncs_3=(none);

{* select atoms in NCS related molecule (use none if not used) *}
{===>} atom_ncs_4=(none);

{* select atoms in NCS related molecule (use none if not used) *}
{===>} atom_ncs_5=(none);

{* select atoms in NCS related molecule (use none if not used) *}
{===>} atom_ncs_6=(none);

{* select atoms in NCS related molecule (use none if not used) *}
{===>} atom_ncs_7=(none);

{* select atoms in NCS related molecule (use none if not used) *}
{===>} atom_ncs_8=(none);

{* ignore atom names when comparing NCS related atoms *}
{+ choice: true false +}
{===>} ignore_name=false;

{=========================== output files ============================}

{* output listing file with NCS operators *}
{===>} list_outfile="get_ncs_matrices.list";

{===========================================================================}
{        things below this line do not normally need to be changed          }
{===========================================================================}

 ) {- end block parameter definition -}

 checkversion 1.3

 evaluate ($log_level=quiet)

  if ( $log_level = verbose ) then
   set message=normal echo=on end
 else
   set message=off echo=off end
 end if

 if ( &BLANK%structure_infile = true ) then
 
    {- read topology files -}
    topology
     evaluate ($counter=1)
     evaluate ($done=false)
     while ( $done = false ) loop read
      if ( &exist_topology_infile_$counter = true ) then
         if ( &BLANK%topology_infile_$counter = false ) then
            @@&topology_infile_$counter
         end if
      else
        evaluate ($done=true)
      end if
      evaluate ($counter=$counter+1)
     end loop read
    end
    
    @CNS_XTALMODULE:mtfautogenerate (
                                  coordinate_infile=&coordinate_infile;
                                  convert=true;
                                  separate=true;
                                  atom_delete=(not known);
                                  hydrogen_flag=true;
                                  break_cutoff=2.5;
                                  disulphide_dist=3.0;
                                  carbo_dist=2.5;
                                  patch_infile=&patch_infile;
                                  O5_becomes="O";
                                 )

 else

   structure @&structure_infile end
   coordinates @&coordinate_infile

 end if

 {- read parameter files -}
 parameter
  evaluate ($counter=1)
  evaluate ($done=false)
  while ( $done = false ) loop read
   if ( &exist_parameter_infile_$counter = true ) then
      if ( &BLANK%parameter_infile_$counter = false ) then
         @@&parameter_infile_$counter
      end if
   else
     evaluate ($done=true)
   end if
   evaluate ($counter=$counter+1)
  end loop read
 end

 set message=normal echo=on end

 if ( &ignore_name = true ) then
   do (name="CA") (all)
 end if

 set display=&list_outfile end

 display >>>> NCS operators for: 
 display >>>>   coordinate file= &STRIP%coordinate_infile
 display
 display ======================================================================
 display

 evaluate ($done=false)
 evaluate ($counter=1)
 while ( $done = false ) loop group
   if ( &exist_atom_ncs_$counter = true ) then
     show sum(1) (&atom_ncs_$counter)
     if ( $result > 0 ) then
       ncs restraints
         init
         group
           equiv=&atom_ref
           equiv=&atom_ncs_$counter
         end
         ?
       end
         display  NCS operator which transforms:
         display    &atom_ref -> &atom_ncs_$counter
         display
         display       matrix= ( $rot_1_2_1_1[f8.5] $rot_1_2_1_2[f8.5] $rot_1_2_1_3[f8.5] )
         display               ( $rot_1_2_2_1[f8.5] $rot_1_2_2_2[f8.5] $rot_1_2_2_3[f8.5] )
         display               ( $rot_1_2_3_1[f8.5] $rot_1_2_3_2[f8.5] $rot_1_2_3_3[f8.5] )
         display       translation= ( $rot_1_2_1_4[f10.5] $rot_1_2_2_4[f10.5] $rot_1_2_3_4[f10.5] )
         display
         display       rms difference= $rot_1_2_rmsd[f8.5]
         display
         display ======================================================================
         display
     end if
     evaluate ($counter=$counter+1)
   else
     evaluate ($done=true)
   end if
 end loop group

 display Inverse operators
 display
 display ======================================================================
 display

 evaluate ($done=false)
 evaluate ($counter=1)
 while ( $done = false ) loop group
   if ( &exist_atom_ncs_$counter = true ) then
     show sum(1) (&atom_ncs_$counter)
     if ( $result > 0 ) then
       ncs restraints
         init
         group
           equiv=&atom_ref
           equiv=&atom_ncs_$counter
         end
         ?
       end
         display  Inverse NCS operator which transforms:
         display    &atom_ncs_$counter -> &atom_ref
         display
         display       matrix= ( $rotinv_1_2_1_1[f8.5] $rotinv_1_2_1_2[f8.5] $rotinv_1_2_1_3[f8.5] )
         display               ( $rotinv_1_2_2_1[f8.5] $rotinv_1_2_2_2[f8.5] $rotinv_1_2_2_3[f8.5] )
         display               ( $rotinv_1_2_3_1[f8.5] $rotinv_1_2_3_2[f8.5] $rotinv_1_2_3_3[f8.5] )
         display       translation= ( $rotinv_1_2_1_4[f10.5] $rotinv_1_2_2_4[f10.5] $rotinv_1_2_3_4[f10.5] )
         display
         display       rms difference= $rotinv_1_2_rmsd[f8.5]
         display
         display ======================================================================
         display
     end if
     evaluate ($counter=$counter+1)
   else
     evaluate ($done=true)
   end if
 end loop group

 stop
