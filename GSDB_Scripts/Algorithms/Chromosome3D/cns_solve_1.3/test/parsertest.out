          ============================================================
          |                                                          |
          |            Crystallography & NMR System (CNS)            |
          |                         CNSsolve                         |
          |                                                          |
          ============================================================
           Version: 1.3
           Status: General release
          ============================================================
           Written by: A.T.Brunger, P.D.Adams, G.M.Clore, W.L.DeLano,
                       P.Gros, R.W.Grosse-Kunstleve,J.-S.Jiang,J.M.Krahn,
                       J.Kuszewski, M.Nilges, N.S.Pannu, R.J.Read,
                       L.M.Rice, G.F.Schroeder, T.Simonson, G.L.Warren.
           Copyright (c) 1997-2010 Yale University
          ============================================================
           Running on machine: lewis4-r710-login-node223 (x86_64/Linux,64-bit)
                               with 16 threads
           Program started by: oeow39
           Program started at: 16:08:05 on 05-Jul-2018
          ============================================================

 FFT3C: Using FFTPACK4.1

 CNSsolve>remarks  parsertest.inp 
 CNSsolve>remarks 
 CNSsolve>remarks  test CNS parser 
 CNSsolve>remarks  Axel T. Brunger 
 CNSsolve> 
 CNSsolve>set message=all end 
 CNSsolve> 
 CNSsolve>set display=parsertest.dat end 
 ASSFIL: file parsertest.dat opened.
 CNSsolve>literal eval ( $test = 2 ) 
 CNSsolve>close parsertest.dat end 
 VCLOSE: Display file reset to OUTPUT.
 CNSsolve>set display=OUTPUT end 
 CNSsolve> 
 CNSsolve>set abort=off end 
 CNSsolve> 
 CNSsolve>eval ( $j = 0 ) 
 EVALUATE: symbol $J set to    0.00000     (real)
 CNSsolve>while ($j < 5) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>   evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    1.00000     (real)
 CNSsolve> 
 CNSsolve>      if ( $j eq 4 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>          @does.not.exist 
 CNSsolve>          @parsertest.dat 
 ASSFIL: file parsertest.dat opened.
 CNSsolve>eval ( $test = 2 ) 
 CNSsolve>      end if 
 CNSsolve>           eval ( $test = 1 ) 
 EVALUATE: symbol $TEST set to    1.00000     (real)
 CNSsolve>           $? 
 Current Symbol Table
 NOTE: The scope number (#) of $<name> is shown as $_#_<name> 
 $_1_TEST=   1.00000     (real)
 $_1_J=   1.00000     (real)
 $_1_NCS=   1.00000     (real)
 $_1_EFLAG.VEAN="FALSE" (logical) 
 $_1_EFLAG.DANI="FALSE" (logical) 
 $_1_EFLAG.SANI="FALSE" (logical) 
 $_1_EFLAG.RAMA="FALSE" (logical) 
 $_1_EFLAG.ONEB="FALSE" (logical) 
 $_1_EFLAG.PROT="FALSE" (logical) 
 $_1_EFLAG.CARB="FALSE" (logical) 
 $_1_EFLAG.COUP="FALSE" (logical) 
 $_1_EFLAG.ANDB="FALSE" (logical) 
 $_1_EFLAG.DG="FALSE" (logical) 
 $_1_EFLAG.PLAN="FALSE" (logical) 
 $_1_EFLAG.XREF="FALSE" (logical) 
 $_1_EFLAG.NOE="FALSE" (logical) 
 $_1_EFLAG.NCS="FALSE" (logical) 
 $_1_EFLAG.CDIH="FALSE" (logical) 
 $_1_EFLAG.HARM="FALSE" (logical) 
 $_1_EFLAG.PELE="FALSE" (logical) 
 $_1_EFLAG.PVDW="FALSE" (logical) 
 $_1_EFLAG.ELEC="TRUE" (logical) 
 $_1_EFLAG.VDW="TRUE" (logical) 
 $_1_EFLAG.IMPR="TRUE" (logical) 
 $_1_EFLAG.DIHE="TRUE" (logical) 
 $_1_EFLAG.ANGL="TRUE" (logical) 
 $_1_EFLAG.BOND="TRUE" (logical) 
 $_1_EFLAG.GRAD="FALSE" (logical) 
 $_1_EFLAG.TEMP="FALSE" (logical) 
 $_1_EFLAG.ENER="FALSE" (logical) 
 $_1_EFLAG.TOTK="FALSE" (logical) 
 $_1_EFLAG.TOTE="FALSE" (logical) 
 $_1_BIN_NUMBER=   8.00000     (real)
 $_1_SYMMETRY=   1.00000     (real)
 $_1_CSTAR=   1.00000     (real)
 $_1_BSTAR=   1.00000     (real)
 $_1_ASTAR=   1.00000     (real)
 $_1_XRINTR_3_3=   1.00000     (real)
 $_1_XRINTR_3_2=   0.00000     (real)
 $_1_XRINTR_3_1=   0.00000     (real)
 $_1_XRINTR_2_3= -0.349148E-14 (real)
 $_1_XRINTR_2_2=   1.00000     (real)
 $_1_XRINTR_2_1=   0.00000     (real)
 $_1_XRINTR_1_3= -0.349148E-14 (real)
 $_1_XRINTR_1_2= -0.349148E-14 (real)
 $_1_XRINTR_1_1=   1.00000     (real)
 $_1_XRTR_3_3=   1.00000     (real)
 $_1_XRTR_3_2=   0.00000     (real)
 $_1_XRTR_3_1=   0.00000     (real)
 $_1_XRTR_2_3=  0.349148E-14 (real)
 $_1_XRTR_2_2=   1.00000     (real)
 $_1_XRTR_2_1=   0.00000     (real)
 $_1_XRTR_1_3=  0.349148E-14 (real)
 $_1_XRTR_1_2=  0.349148E-14 (real)
 $_1_XRTR_1_1=   1.00000     (real)
 $_1_XRCELL_6=   90.0000     (real)
 $_1_XRCELL_5=   90.0000     (real)
 $_1_XRCELL_4=   90.0000     (real)
 $_1_XRCELL_3=   1.00000     (real)
 $_1_XRCELL_2=   1.00000     (real)
 $_1_XRCELL_1=   1.00000     (real)
 $_1_VOLUME=   1.00000     (real)
 $_1_FP_EPSILON=  0.222045E-15 (real)
 $_1_CNS_PATCH="0" (string) 
 $_1_CNS_VERSION="1.3" (string) 
 $_1_LOG_LEVEL="QUIET" (string) 
 $_1_SYSTEM="x86_64/Linux" (string) 
 $_1_NAME="oeow39" (string) 
 $_1_TIMFAC=  0.488882E-01 (real)
 $_1_PI=   3.14159     (real)
 $_1_KBOLTZ=  0.198719E-02 (real)
 CNSsolve> end loop j 
 CNSsolve>while ($j < 5) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>   evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    2.00000     (real)
 CNSsolve> 
 CNSsolve>      if ( $j eq 4 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>          @does.not.exist 
 CNSsolve>           
 CNSsolve>eval ( $test = 2 ) 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>      end if 
 CNSsolve>           eval ( $test = 1 ) 
 EVALUATE: symbol $TEST set to    1.00000     (real)
 CNSsolve>           $? 
 Current Symbol Table
 NOTE: The scope number (#) of $<name> is shown as $_#_<name> 
 $_1_TEST=   1.00000     (real)
 $_1_J=   2.00000     (real)
 $_1_NCS=   1.00000     (real)
 $_1_EFLAG.VEAN="FALSE" (logical) 
 $_1_EFLAG.DANI="FALSE" (logical) 
 $_1_EFLAG.SANI="FALSE" (logical) 
 $_1_EFLAG.RAMA="FALSE" (logical) 
 $_1_EFLAG.ONEB="FALSE" (logical) 
 $_1_EFLAG.PROT="FALSE" (logical) 
 $_1_EFLAG.CARB="FALSE" (logical) 
 $_1_EFLAG.COUP="FALSE" (logical) 
 $_1_EFLAG.ANDB="FALSE" (logical) 
 $_1_EFLAG.DG="FALSE" (logical) 
 $_1_EFLAG.PLAN="FALSE" (logical) 
 $_1_EFLAG.XREF="FALSE" (logical) 
 $_1_EFLAG.NOE="FALSE" (logical) 
 $_1_EFLAG.NCS="FALSE" (logical) 
 $_1_EFLAG.CDIH="FALSE" (logical) 
 $_1_EFLAG.HARM="FALSE" (logical) 
 $_1_EFLAG.PELE="FALSE" (logical) 
 $_1_EFLAG.PVDW="FALSE" (logical) 
 $_1_EFLAG.ELEC="TRUE" (logical) 
 $_1_EFLAG.VDW="TRUE" (logical) 
 $_1_EFLAG.IMPR="TRUE" (logical) 
 $_1_EFLAG.DIHE="TRUE" (logical) 
 $_1_EFLAG.ANGL="TRUE" (logical) 
 $_1_EFLAG.BOND="TRUE" (logical) 
 $_1_EFLAG.GRAD="FALSE" (logical) 
 $_1_EFLAG.TEMP="FALSE" (logical) 
 $_1_EFLAG.ENER="FALSE" (logical) 
 $_1_EFLAG.TOTK="FALSE" (logical) 
 $_1_EFLAG.TOTE="FALSE" (logical) 
 $_1_BIN_NUMBER=   8.00000     (real)
 $_1_SYMMETRY=   1.00000     (real)
 $_1_CSTAR=   1.00000     (real)
 $_1_BSTAR=   1.00000     (real)
 $_1_ASTAR=   1.00000     (real)
 $_1_XRINTR_3_3=   1.00000     (real)
 $_1_XRINTR_3_2=   0.00000     (real)
 $_1_XRINTR_3_1=   0.00000     (real)
 $_1_XRINTR_2_3= -0.349148E-14 (real)
 $_1_XRINTR_2_2=   1.00000     (real)
 $_1_XRINTR_2_1=   0.00000     (real)
 $_1_XRINTR_1_3= -0.349148E-14 (real)
 $_1_XRINTR_1_2= -0.349148E-14 (real)
 $_1_XRINTR_1_1=   1.00000     (real)
 $_1_XRTR_3_3=   1.00000     (real)
 $_1_XRTR_3_2=   0.00000     (real)
 $_1_XRTR_3_1=   0.00000     (real)
 $_1_XRTR_2_3=  0.349148E-14 (real)
 $_1_XRTR_2_2=   1.00000     (real)
 $_1_XRTR_2_1=   0.00000     (real)
 $_1_XRTR_1_3=  0.349148E-14 (real)
 $_1_XRTR_1_2=  0.349148E-14 (real)
 $_1_XRTR_1_1=   1.00000     (real)
 $_1_XRCELL_6=   90.0000     (real)
 $_1_XRCELL_5=   90.0000     (real)
 $_1_XRCELL_4=   90.0000     (real)
 $_1_XRCELL_3=   1.00000     (real)
 $_1_XRCELL_2=   1.00000     (real)
 $_1_XRCELL_1=   1.00000     (real)
 $_1_VOLUME=   1.00000     (real)
 $_1_FP_EPSILON=  0.222045E-15 (real)
 $_1_CNS_PATCH="0" (string) 
 $_1_CNS_VERSION="1.3" (string) 
 $_1_LOG_LEVEL="QUIET" (string) 
 $_1_SYSTEM="x86_64/Linux" (string) 
 $_1_NAME="oeow39" (string) 
 $_1_TIMFAC=  0.488882E-01 (real)
 $_1_PI=   3.14159     (real)
 $_1_KBOLTZ=  0.198719E-02 (real)
 CNSsolve> end loop j 
 CNSsolve>while ($j < 5) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>   evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>      if ( $j eq 4 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>          @does.not.exist 
 CNSsolve>           
 CNSsolve>eval ( $test = 2 ) 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>      end if 
 CNSsolve>           eval ( $test = 1 ) 
 EVALUATE: symbol $TEST set to    1.00000     (real)
 CNSsolve>           $? 
 Current Symbol Table
 NOTE: The scope number (#) of $<name> is shown as $_#_<name> 
 $_1_TEST=   1.00000     (real)
 $_1_J=   3.00000     (real)
 $_1_NCS=   1.00000     (real)
 $_1_EFLAG.VEAN="FALSE" (logical) 
 $_1_EFLAG.DANI="FALSE" (logical) 
 $_1_EFLAG.SANI="FALSE" (logical) 
 $_1_EFLAG.RAMA="FALSE" (logical) 
 $_1_EFLAG.ONEB="FALSE" (logical) 
 $_1_EFLAG.PROT="FALSE" (logical) 
 $_1_EFLAG.CARB="FALSE" (logical) 
 $_1_EFLAG.COUP="FALSE" (logical) 
 $_1_EFLAG.ANDB="FALSE" (logical) 
 $_1_EFLAG.DG="FALSE" (logical) 
 $_1_EFLAG.PLAN="FALSE" (logical) 
 $_1_EFLAG.XREF="FALSE" (logical) 
 $_1_EFLAG.NOE="FALSE" (logical) 
 $_1_EFLAG.NCS="FALSE" (logical) 
 $_1_EFLAG.CDIH="FALSE" (logical) 
 $_1_EFLAG.HARM="FALSE" (logical) 
 $_1_EFLAG.PELE="FALSE" (logical) 
 $_1_EFLAG.PVDW="FALSE" (logical) 
 $_1_EFLAG.ELEC="TRUE" (logical) 
 $_1_EFLAG.VDW="TRUE" (logical) 
 $_1_EFLAG.IMPR="TRUE" (logical) 
 $_1_EFLAG.DIHE="TRUE" (logical) 
 $_1_EFLAG.ANGL="TRUE" (logical) 
 $_1_EFLAG.BOND="TRUE" (logical) 
 $_1_EFLAG.GRAD="FALSE" (logical) 
 $_1_EFLAG.TEMP="FALSE" (logical) 
 $_1_EFLAG.ENER="FALSE" (logical) 
 $_1_EFLAG.TOTK="FALSE" (logical) 
 $_1_EFLAG.TOTE="FALSE" (logical) 
 $_1_BIN_NUMBER=   8.00000     (real)
 $_1_SYMMETRY=   1.00000     (real)
 $_1_CSTAR=   1.00000     (real)
 $_1_BSTAR=   1.00000     (real)
 $_1_ASTAR=   1.00000     (real)
 $_1_XRINTR_3_3=   1.00000     (real)
 $_1_XRINTR_3_2=   0.00000     (real)
 $_1_XRINTR_3_1=   0.00000     (real)
 $_1_XRINTR_2_3= -0.349148E-14 (real)
 $_1_XRINTR_2_2=   1.00000     (real)
 $_1_XRINTR_2_1=   0.00000     (real)
 $_1_XRINTR_1_3= -0.349148E-14 (real)
 $_1_XRINTR_1_2= -0.349148E-14 (real)
 $_1_XRINTR_1_1=   1.00000     (real)
 $_1_XRTR_3_3=   1.00000     (real)
 $_1_XRTR_3_2=   0.00000     (real)
 $_1_XRTR_3_1=   0.00000     (real)
 $_1_XRTR_2_3=  0.349148E-14 (real)
 $_1_XRTR_2_2=   1.00000     (real)
 $_1_XRTR_2_1=   0.00000     (real)
 $_1_XRTR_1_3=  0.349148E-14 (real)
 $_1_XRTR_1_2=  0.349148E-14 (real)
 $_1_XRTR_1_1=   1.00000     (real)
 $_1_XRCELL_6=   90.0000     (real)
 $_1_XRCELL_5=   90.0000     (real)
 $_1_XRCELL_4=   90.0000     (real)
 $_1_XRCELL_3=   1.00000     (real)
 $_1_XRCELL_2=   1.00000     (real)
 $_1_XRCELL_1=   1.00000     (real)
 $_1_VOLUME=   1.00000     (real)
 $_1_FP_EPSILON=  0.222045E-15 (real)
 $_1_CNS_PATCH="0" (string) 
 $_1_CNS_VERSION="1.3" (string) 
 $_1_LOG_LEVEL="QUIET" (string) 
 $_1_SYSTEM="x86_64/Linux" (string) 
 $_1_NAME="oeow39" (string) 
 $_1_TIMFAC=  0.488882E-01 (real)
 $_1_PI=   3.14159     (real)
 $_1_KBOLTZ=  0.198719E-02 (real)
 CNSsolve> end loop j 
 CNSsolve>while ($j < 5) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>   evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    4.00000     (real)
 CNSsolve> 
 CNSsolve>      if ( $j eq 4 ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>          @does.not.exist 
 %ASSFIL-ERR: error opening file does.not.exist
 %ASSFIL error encountered: Error accessing file
   (CNS is in mode: SET ABORT=OFF END)
 CNSsolve>           
 CNSsolve>eval ( $test = 2 ) 
 EVALUATE: symbol $TEST set to    2.00000     (real)
 CNSsolve> 
 CNSsolve> 
 CNSsolve>      end if 
 CNSsolve>           eval ( $test = 1 ) 
 EVALUATE: symbol $TEST set to    1.00000     (real)
 CNSsolve>           $? 
 Current Symbol Table
 NOTE: The scope number (#) of $<name> is shown as $_#_<name> 
 $_1_TEST=   1.00000     (real)
 $_1_J=   4.00000     (real)
 $_1_NCS=   1.00000     (real)
 $_1_EFLAG.VEAN="FALSE" (logical) 
 $_1_EFLAG.DANI="FALSE" (logical) 
 $_1_EFLAG.SANI="FALSE" (logical) 
 $_1_EFLAG.RAMA="FALSE" (logical) 
 $_1_EFLAG.ONEB="FALSE" (logical) 
 $_1_EFLAG.PROT="FALSE" (logical) 
 $_1_EFLAG.CARB="FALSE" (logical) 
 $_1_EFLAG.COUP="FALSE" (logical) 
 $_1_EFLAG.ANDB="FALSE" (logical) 
 $_1_EFLAG.DG="FALSE" (logical) 
 $_1_EFLAG.PLAN="FALSE" (logical) 
 $_1_EFLAG.XREF="FALSE" (logical) 
 $_1_EFLAG.NOE="FALSE" (logical) 
 $_1_EFLAG.NCS="FALSE" (logical) 
 $_1_EFLAG.CDIH="FALSE" (logical) 
 $_1_EFLAG.HARM="FALSE" (logical) 
 $_1_EFLAG.PELE="FALSE" (logical) 
 $_1_EFLAG.PVDW="FALSE" (logical) 
 $_1_EFLAG.ELEC="TRUE" (logical) 
 $_1_EFLAG.VDW="TRUE" (logical) 
 $_1_EFLAG.IMPR="TRUE" (logical) 
 $_1_EFLAG.DIHE="TRUE" (logical) 
 $_1_EFLAG.ANGL="TRUE" (logical) 
 $_1_EFLAG.BOND="TRUE" (logical) 
 $_1_EFLAG.GRAD="FALSE" (logical) 
 $_1_EFLAG.TEMP="FALSE" (logical) 
 $_1_EFLAG.ENER="FALSE" (logical) 
 $_1_EFLAG.TOTK="FALSE" (logical) 
 $_1_EFLAG.TOTE="FALSE" (logical) 
 $_1_BIN_NUMBER=   8.00000     (real)
 $_1_SYMMETRY=   1.00000     (real)
 $_1_CSTAR=   1.00000     (real)
 $_1_BSTAR=   1.00000     (real)
 $_1_ASTAR=   1.00000     (real)
 $_1_XRINTR_3_3=   1.00000     (real)
 $_1_XRINTR_3_2=   0.00000     (real)
 $_1_XRINTR_3_1=   0.00000     (real)
 $_1_XRINTR_2_3= -0.349148E-14 (real)
 $_1_XRINTR_2_2=   1.00000     (real)
 $_1_XRINTR_2_1=   0.00000     (real)
 $_1_XRINTR_1_3= -0.349148E-14 (real)
 $_1_XRINTR_1_2= -0.349148E-14 (real)
 $_1_XRINTR_1_1=   1.00000     (real)
 $_1_XRTR_3_3=   1.00000     (real)
 $_1_XRTR_3_2=   0.00000     (real)
 $_1_XRTR_3_1=   0.00000     (real)
 $_1_XRTR_2_3=  0.349148E-14 (real)
 $_1_XRTR_2_2=   1.00000     (real)
 $_1_XRTR_2_1=   0.00000     (real)
 $_1_XRTR_1_3=  0.349148E-14 (real)
 $_1_XRTR_1_2=  0.349148E-14 (real)
 $_1_XRTR_1_1=   1.00000     (real)
 $_1_XRCELL_6=   90.0000     (real)
 $_1_XRCELL_5=   90.0000     (real)
 $_1_XRCELL_4=   90.0000     (real)
 $_1_XRCELL_3=   1.00000     (real)
 $_1_XRCELL_2=   1.00000     (real)
 $_1_XRCELL_1=   1.00000     (real)
 $_1_VOLUME=   1.00000     (real)
 $_1_FP_EPSILON=  0.222045E-15 (real)
 $_1_CNS_PATCH="0" (string) 
 $_1_CNS_VERSION="1.3" (string) 
 $_1_LOG_LEVEL="QUIET" (string) 
 $_1_SYSTEM="x86_64/Linux" (string) 
 $_1_NAME="oeow39" (string) 
 $_1_TIMFAC=  0.488882E-01 (real)
 $_1_PI=   3.14159     (real)
 $_1_KBOLTZ=  0.198719E-02 (real)
 CNSsolve> end loop j 
 CNSsolve>while ($j < 5) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>   evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    5.00000     (real)
 CNSsolve> 
 CNSsolve>      if ( $j eq 4 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>          @does.not.exist 
 CNSsolve>           
 CNSsolve>eval ( $test = 2 ) 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>      end if 
 CNSsolve>           eval ( $test = 1 ) 
 EVALUATE: symbol $TEST set to    1.00000     (real)
 CNSsolve>           $? 
 Current Symbol Table
 NOTE: The scope number (#) of $<name> is shown as $_#_<name> 
 $_1_TEST=   1.00000     (real)
 $_1_J=   5.00000     (real)
 $_1_NCS=   1.00000     (real)
 $_1_EFLAG.VEAN="FALSE" (logical) 
 $_1_EFLAG.DANI="FALSE" (logical) 
 $_1_EFLAG.SANI="FALSE" (logical) 
 $_1_EFLAG.RAMA="FALSE" (logical) 
 $_1_EFLAG.ONEB="FALSE" (logical) 
 $_1_EFLAG.PROT="FALSE" (logical) 
 $_1_EFLAG.CARB="FALSE" (logical) 
 $_1_EFLAG.COUP="FALSE" (logical) 
 $_1_EFLAG.ANDB="FALSE" (logical) 
 $_1_EFLAG.DG="FALSE" (logical) 
 $_1_EFLAG.PLAN="FALSE" (logical) 
 $_1_EFLAG.XREF="FALSE" (logical) 
 $_1_EFLAG.NOE="FALSE" (logical) 
 $_1_EFLAG.NCS="FALSE" (logical) 
 $_1_EFLAG.CDIH="FALSE" (logical) 
 $_1_EFLAG.HARM="FALSE" (logical) 
 $_1_EFLAG.PELE="FALSE" (logical) 
 $_1_EFLAG.PVDW="FALSE" (logical) 
 $_1_EFLAG.ELEC="TRUE" (logical) 
 $_1_EFLAG.VDW="TRUE" (logical) 
 $_1_EFLAG.IMPR="TRUE" (logical) 
 $_1_EFLAG.DIHE="TRUE" (logical) 
 $_1_EFLAG.ANGL="TRUE" (logical) 
 $_1_EFLAG.BOND="TRUE" (logical) 
 $_1_EFLAG.GRAD="FALSE" (logical) 
 $_1_EFLAG.TEMP="FALSE" (logical) 
 $_1_EFLAG.ENER="FALSE" (logical) 
 $_1_EFLAG.TOTK="FALSE" (logical) 
 $_1_EFLAG.TOTE="FALSE" (logical) 
 $_1_BIN_NUMBER=   8.00000     (real)
 $_1_SYMMETRY=   1.00000     (real)
 $_1_CSTAR=   1.00000     (real)
 $_1_BSTAR=   1.00000     (real)
 $_1_ASTAR=   1.00000     (real)
 $_1_XRINTR_3_3=   1.00000     (real)
 $_1_XRINTR_3_2=   0.00000     (real)
 $_1_XRINTR_3_1=   0.00000     (real)
 $_1_XRINTR_2_3= -0.349148E-14 (real)
 $_1_XRINTR_2_2=   1.00000     (real)
 $_1_XRINTR_2_1=   0.00000     (real)
 $_1_XRINTR_1_3= -0.349148E-14 (real)
 $_1_XRINTR_1_2= -0.349148E-14 (real)
 $_1_XRINTR_1_1=   1.00000     (real)
 $_1_XRTR_3_3=   1.00000     (real)
 $_1_XRTR_3_2=   0.00000     (real)
 $_1_XRTR_3_1=   0.00000     (real)
 $_1_XRTR_2_3=  0.349148E-14 (real)
 $_1_XRTR_2_2=   1.00000     (real)
 $_1_XRTR_2_1=   0.00000     (real)
 $_1_XRTR_1_3=  0.349148E-14 (real)
 $_1_XRTR_1_2=  0.349148E-14 (real)
 $_1_XRTR_1_1=   1.00000     (real)
 $_1_XRCELL_6=   90.0000     (real)
 $_1_XRCELL_5=   90.0000     (real)
 $_1_XRCELL_4=   90.0000     (real)
 $_1_XRCELL_3=   1.00000     (real)
 $_1_XRCELL_2=   1.00000     (real)
 $_1_XRCELL_1=   1.00000     (real)
 $_1_VOLUME=   1.00000     (real)
 $_1_FP_EPSILON=  0.222045E-15 (real)
 $_1_CNS_PATCH="0" (string) 
 $_1_CNS_VERSION="1.3" (string) 
 $_1_LOG_LEVEL="QUIET" (string) 
 $_1_SYSTEM="x86_64/Linux" (string) 
 $_1_NAME="oeow39" (string) 
 $_1_TIMFAC=  0.488882E-01 (real)
 $_1_PI=   3.14159     (real)
 $_1_KBOLTZ=  0.198719E-02 (real)
 CNSsolve> end loop j 
 CNSsolve>while ($j < 5) loop j 
 NEXTCD: condition evaluated as false
 CNSsolve>   evaluate ($j=$j+1) 
 CNSsolve> 
 CNSsolve>      if ( $j eq 4 ) then 
 CNSsolve>          @does.not.exist 
 CNSsolve>           
 CNSsolve>eval ( $test = 2 ) 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>      end if 
 CNSsolve>           eval ( $test = 1 ) 
 CNSsolve>           $? 
 CNSsolve> end loop j 
 CNSsolve> 
 CNSsolve>evaluate( $1 = 3.0 ) 
 EVALUATE: symbol $1 set to    3.00000     (real)
 CNSsolve>evaluate( $2 = 4.0 ) 
 EVALUATE: symbol $2 set to    4.00000     (real)
 CNSsolve> 
 CNSsolve>{* if statements *} 
 CNSsolve>{* ============= *} 
 CNSsolve> 
 CNSsolve>if ( $1 = 2.0 )   then 
 NEXTCD: condition evaluated as false
 CNSsolve>   display    ERROR !!!! 
 CNSsolve>   parameter 
 CNSsolve>      nbonds end 
 CNSsolve>   end 
 CNSsolve>elseif ( $2 = 4.0 ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>   if ( $1 = 3 )  then 
 NEXTCD: condition evaluated as true
 CNSsolve>      display   OK !! 
  OK !!
 CNSsolve>      if ( $1 = 2 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>         display   ERROR !!!! 
 CNSsolve>      end if 
 CNSsolve>   else 
 CNSsolve>      minimize powell  end 
 CNSsolve>      display   ERROR !!!! 
 CNSsolve>      dynamics torsion end 
 CNSsolve>   end if 
 CNSsolve>else 
 CNSsolve>   display  ERROR !!!! 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>evaluate ($1=-3) 
 EVALUATE: symbol $1 set to   -3.00000     (real)
 CNSsolve>if ($1 = -3 ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>   display  ok !!! 
 ok !!!
 CNSsolve>end if 
 CNSsolve>evaluate ($1=3) 
 EVALUATE: symbol $1 set to    3.00000     (real)
 CNSsolve>if ($1 = +3 ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>   display  ok !!! 
 ok !!!
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (1=1.000) then 
 NEXTCD: condition evaluated as true
 CNSsolve>   display  ok !! 
 ok !!
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (1> 1.00E00) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   display no !! 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (1 < $1) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  display  OK !! 
 OK !!
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (a=b) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  display no !! 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (a=a) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  display ok !! 
ok !!
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (a="A") then 
 NEXTCD: condition evaluated as true
 CNSsolve>  display ok !! 
ok !!
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>eval ($rr="a") 
 EVALUATE: symbol $RR set to "a" (string)
 CNSsolve>if ($rr="a") then 
 NEXTCD: condition evaluated as true
 CNSsolve>  display ok!! 
ok!!
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ("a"=$rr) then 
 NEXTCD: condition evaluated as true
 CNSsolve>   display  ok !! 
 ok !!
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>for $1 in ( 1 -1 2. -3.e-10 +5 +.6 ) loop main 
 FOR LOOP: symbol 1 set to    1.00000     (real)
 CNSsolve>   display  $1 
 1
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( 1 -1 2. -3.e-10 +5 +.6 ) loop main 
 FOR LOOP: symbol 1 set to   -1.00000     (real)
 CNSsolve>   display  $1 
 -1
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( 1 -1 2. -3.e-10 +5 +.6 ) loop main 
 FOR LOOP: symbol 1 set to    2.00000     (real)
 CNSsolve>   display  $1 
 2
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( 1 -1 2. -3.e-10 +5 +.6 ) loop main 
 FOR LOOP: symbol 1 set to  -0.300000E-09 (real)
 CNSsolve>   display  $1 
 -3E-10
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( 1 -1 2. -3.e-10 +5 +.6 ) loop main 
 FOR LOOP: symbol 1 set to    5.00000     (real)
 CNSsolve>   display  $1 
 5
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( 1 -1 2. -3.e-10 +5 +.6 ) loop main 
 FOR LOOP: symbol 1 set to   0.600000     (real)
 CNSsolve>   display  $1 
 0.6
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( 1 -1 2. -3.e-10 +5 +.6 ) loop main 
 CNSsolve>   display  $1 
 CNSsolve>end loop main 
 CNSsolve> 
 CNSsolve>evaluate ($1="a") 
 EVALUATE: symbol $1 set to "a" (string)
 CNSsolve>if ($1="b") then 
 NEXTCD: condition evaluated as false
 CNSsolve>   for $1 in ( a b c d ) loop main 
 CNSsolve>       dynamics torsion end 
 CNSsolve>   end loop main 
 CNSsolve>elseif ($1="c") then 
 NEXTCD: condition evaluated as false
 CNSsolve>   for $1 in ( a b c d ) loop main 
 CNSsolve>       dynamics torsion end 
 CNSsolve>   end loop main 
 CNSsolve>elseif ($1="a") then 
 NEXTCD: condition evaluated as true
 CNSsolve>   for $1 in ( a b c d ) loop main 
 Assuming literal string "A"
 FOR LOOP: symbol 1 set to "A" (string)
 CNSsolve>   end loop main 
 CNSsolve>   for $1 in ( a b c d ) loop main 
 Assuming literal string "B"
 FOR LOOP: symbol 1 set to "B" (string)
 CNSsolve>   end loop main 
 CNSsolve>   for $1 in ( a b c d ) loop main 
 Assuming literal string "C"
 FOR LOOP: symbol 1 set to "C" (string)
 CNSsolve>   end loop main 
 CNSsolve>   for $1 in ( a b c d ) loop main 
 Assuming literal string "D"
 FOR LOOP: symbol 1 set to "D" (string)
 CNSsolve>   end loop main 
 CNSsolve>   for $1 in ( a b c d ) loop main 
 CNSsolve>   end loop main 
 CNSsolve>elseif ($1="q") then 
 CNSsolve>   for $1 in ( a b c d ) loop main 
 CNSsolve>       dynamics torsion end 
 CNSsolve>   end loop main 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>{* basic loop with exit statement *} 
 CNSsolve>{* ============================== *} 
 CNSsolve> 
 CNSsolve>for $a in ( 1 2 3 ) loop main 
 FOR LOOP: symbol A set to    1.00000     (real)
 CNSsolve>  evaluate( $1 = 1 ) 
 EVALUATE: symbol $1 set to    1.00000     (real)
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 1
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    2.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 2
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    3.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 3
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    4.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 4
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    5.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 5
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    6.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as true
 CNSsolve>  end loop test 
 CNSsolve>  display  YEAH!!! $a  $1 
 YEAH!!! 1  6
 CNSsolve>end loop main 
 CNSsolve>for $a in ( 1 2 3 ) loop main 
 FOR LOOP: symbol A set to    2.00000     (real)
 CNSsolve>  evaluate( $1 = 1 ) 
 EVALUATE: symbol $1 set to    1.00000     (real)
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 1
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    2.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 2
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    3.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 3
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    4.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 4
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    5.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 5
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    6.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as true
 CNSsolve>  end loop test 
 CNSsolve>  display  YEAH!!! $a  $1 
 YEAH!!! 2  6
 CNSsolve>end loop main 
 CNSsolve>for $a in ( 1 2 3 ) loop main 
 FOR LOOP: symbol A set to    3.00000     (real)
 CNSsolve>  evaluate( $1 = 1 ) 
 EVALUATE: symbol $1 set to    1.00000     (real)
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 1
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    2.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 2
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    3.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 3
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    4.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 4
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    5.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>  end loop test 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 5
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    6.00000     (real)
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 NEXTCD: condition evaluated as true
 CNSsolve>  end loop test 
 CNSsolve>  display  YEAH!!! $a  $1 
 YEAH!!! 3  6
 CNSsolve>end loop main 
 CNSsolve>for $a in ( 1 2 3 ) loop main 
 CNSsolve>  evaluate( $1 = 1 ) 
 CNSsolve>  loop  test 
 CNSsolve>   display   LOOP-INDEX= $1 
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 CNSsolve>   if ( $1 > 5 )  then exit test   end if 
 CNSsolve>  end loop test 
 CNSsolve>  display  YEAH!!! $a  $1 
 CNSsolve>end loop main 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>{* while loop *} 
 CNSsolve>{* ========== *} 
 CNSsolve>evaluate( $1 = 1 ) 
 EVALUATE: symbol $1 set to    1.00000     (real)
 CNSsolve> 
 CNSsolve>while ( $1 <= 5 )   loop test 
 NEXTCD: condition evaluated as true
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 1
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    2.00000     (real)
 CNSsolve>   parameter end 
 CNSsolve>end loop test 
 CNSsolve>while ( $1 <= 5 )   loop test 
 NEXTCD: condition evaluated as true
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 2
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    3.00000     (real)
 CNSsolve>   parameter end 
 CNSsolve>end loop test 
 CNSsolve>while ( $1 <= 5 )   loop test 
 NEXTCD: condition evaluated as true
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 3
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    4.00000     (real)
 CNSsolve>   parameter end 
 CNSsolve>end loop test 
 CNSsolve>while ( $1 <= 5 )   loop test 
 NEXTCD: condition evaluated as true
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 4
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    5.00000     (real)
 CNSsolve>   parameter end 
 CNSsolve>end loop test 
 CNSsolve>while ( $1 <= 5 )   loop test 
 NEXTCD: condition evaluated as true
 CNSsolve>   display   LOOP-INDEX= $1 
  LOOP-INDEX= 5
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 EVALUATE: symbol $1 set to    6.00000     (real)
 CNSsolve>   parameter end 
 CNSsolve>end loop test 
 CNSsolve>while ( $1 <= 5 )   loop test 
 NEXTCD: condition evaluated as false
 CNSsolve>   display   LOOP-INDEX= $1 
 CNSsolve>   evaluate( $1 = $1 + 1 ) 
 CNSsolve>   parameter end 
 CNSsolve>end loop test 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>{* for loop *} 
 CNSsolve>{* ======== *} 
 CNSsolve> 
 CNSsolve>for $1 in ( A B C D E )   loop test 
 Assuming literal string "A"
 FOR LOOP: symbol 1 set to "A" (string)
 CNSsolve>   display   LOOP-COUNTER= $1 
  LOOP-COUNTER= A
 CNSsolve>end loop test 
 CNSsolve>for $1 in ( A B C D E )   loop test 
 Assuming literal string "B"
 FOR LOOP: symbol 1 set to "B" (string)
 CNSsolve>   display   LOOP-COUNTER= $1 
  LOOP-COUNTER= B
 CNSsolve>end loop test 
 CNSsolve>for $1 in ( A B C D E )   loop test 
 Assuming literal string "C"
 FOR LOOP: symbol 1 set to "C" (string)
 CNSsolve>   display   LOOP-COUNTER= $1 
  LOOP-COUNTER= C
 CNSsolve>end loop test 
 CNSsolve>for $1 in ( A B C D E )   loop test 
 Assuming literal string "D"
 FOR LOOP: symbol 1 set to "D" (string)
 CNSsolve>   display   LOOP-COUNTER= $1 
  LOOP-COUNTER= D
 CNSsolve>end loop test 
 CNSsolve>for $1 in ( A B C D E )   loop test 
 Assuming literal string "E"
 FOR LOOP: symbol 1 set to "E" (string)
 CNSsolve>   display   LOOP-COUNTER= $1 
  LOOP-COUNTER= E
 CNSsolve>end loop test 
 CNSsolve>for $1 in ( A B C D E )   loop test 
 CNSsolve>   display   LOOP-COUNTER= $1 
 CNSsolve>end loop test 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>{* nested loops *} 
 CNSsolve>{* ============ *} 
 CNSsolve> 
 CNSsolve>for $1 in (A B C D E) loop test 
 Assuming literal string "A"
 FOR LOOP: symbol 1 set to "A" (string)
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    1.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= A    LOOP-SUB-INDEX= 1
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    2.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= A    LOOP-SUB-INDEX= 2
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    3.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= A    LOOP-SUB-INDEX= 3
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>end loop test 
 CNSsolve>for $1 in (A B C D E) loop test 
 Assuming literal string "B"
 FOR LOOP: symbol 1 set to "B" (string)
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    1.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= B    LOOP-SUB-INDEX= 1
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    2.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= B    LOOP-SUB-INDEX= 2
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    3.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= B    LOOP-SUB-INDEX= 3
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>end loop test 
 CNSsolve>for $1 in (A B C D E) loop test 
 Assuming literal string "C"
 FOR LOOP: symbol 1 set to "C" (string)
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    1.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= C    LOOP-SUB-INDEX= 1
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    2.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= C    LOOP-SUB-INDEX= 2
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    3.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= C    LOOP-SUB-INDEX= 3
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>end loop test 
 CNSsolve>for $1 in (A B C D E) loop test 
 Assuming literal string "D"
 FOR LOOP: symbol 1 set to "D" (string)
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    1.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= D    LOOP-SUB-INDEX= 1
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    2.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= D    LOOP-SUB-INDEX= 2
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    3.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= D    LOOP-SUB-INDEX= 3
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as false
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>end loop test 
 CNSsolve>for $1 in (A B C D E) loop test 
 Assuming literal string "E"
 FOR LOOP: symbol 1 set to "E" (string)
 CNSsolve>    for $2 in ( 1 2 3 ) loop sub 
 FOR LOOP: symbol 2 set to    1.00000     (real)
 CNSsolve>        display  LOOP-TEST-INDEX= $1    LOOP-SUB-INDEX= $2 
 LOOP-TEST-INDEX= E    LOOP-SUB-INDEX= 1
 CNSsolve>    if ( $1 eq E ) then exit test   end if 
 NEXTCD: condition evaluated as true
 CNSsolve>    parameter end 
 CNSsolve>    end loop sub 
 CNSsolve>end loop test 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>{* test some system symbols *} 
 CNSsolve>{* ======================== *} 
 CNSsolve> 
 CNSsolve>display   CPU-time=$CPU  name=$NAME  system=$SYSTEM 
  CPU-time=9.504E-03  name=oeow39  system=x86_64/Linux
 CNSsolve>display   time=$TIME   date=$DATE 
  time=16:08:05.5   date=05-Jul-2018
 CNSsolve>display   $KBOLTZ  $PI  $TIMFAC 
  1.987191E-03  3.14159  4.888821E-02
 CNSsolve> 
 CNSsolve>{* test continuation *} 
 CNSsolve>evaluate ($1a=123.46) 
 EVALUATE: symbol $1A set to    123.460     (real)
 CNSsolve>evaluate ($2a=10.03) 
 EVALUATE: symbol $2A set to    10.0300     (real)
 CNSsolve>display  $1a\ 
  testing $2a[F10.4]\ 
  abcdefghijklmnop \ 
  test 
 123.46testing    10.0300abcdefghijklmnop test
 CNSsolve> 
 CNSsolve>display  $1a\ 
  $1a[F6.2],$2a[F8.2] 
 123.46123.46,   10.03
 CNSsolve> 
 CNSsolve> 
 CNSsolve>topology 
 RTFRDR>   ! 
 RTFRDR>   mass A   1.0 
 RTFRDR>   mass B   2.0 
 RTFRDR>   mass C   3.0 
 RTFRDR>   mass D   4.0 
 RTFRDR>   mass E   5.0 
 RTFRDR>   mass F   6.0 
 RTFRDR>   mass G   7.0 
 RTFRDR>   mass H   8.0 
 RTFRDR>   mass I   9.0 
 RTFRDR>   ! 
 RTFRDR>   residue test 
 RESIDUE>     atom A  type A  charge 10.0 end 
 RESIDUE>     atom B  type B  charge 20.0 end 
 RESIDUE>     atom C  type C  charge 30.0 end 
 RESIDUE>     atom D  type D  charge 40.0 end 
 RESIDUE>     atom E  type E  charge 50.0 end 
 RESIDUE>     atom F  type F  charge 60.0 end 
 RESIDUE>     atom G  type G  charge 70.0 end 
 RESIDUE>     atom H  type H  charge 80.0 end 
 RESIDUE>     atom I  type I  charge 90.0 end 
 RESIDUE>   end 
 RTFRDR>   ! 
 RTFRDR>end !topology 
 CNSsolve> 
 CNSsolve>segment 
 SEGMENT>   name=test 
 SEGMENT>   molecule name=test number=1 end 
 SEGMNT:     1 TEST molecules have been added to segment "TEST"
 SEGMENT>end 
 Status of internal molecular topology database:
 -> NATOM=          9(MAXA=     1000000)  NBOND=          0(MAXB=     1000000)
 -> NTHETA=         0(MAXT=     2000000)  NGRP=           1(MAXGRP=   1000000)
 -> NPHI=           0(MAXP=     2000000)  NIMPHI=         0(MAXIMP=   1000000)
 -> NNB=            0(MAXNB=    1000000) 
 CNSsolve> 
 CNSsolve>set message=all end 
 CNSsolve> 
 CNSsolve>evaluate ($abce=12.0+50.) 
 EVALUATE: symbol $ABCE set to    62.0000     (real)
 CNSsolve>display   $abce 
  62
 CNSsolve>evaluate ($test=$abce^2+$pi) 
 EVALUATE: symbol $TEST set to    3847.14     (real)
 CNSsolve>display   $test 
  3847.14
 CNSsolve> 
 CNSsolve>$? 
 Current Symbol Table
 NOTE: The scope number (#) of $<name> is shown as $_#_<name> 
 $_1_ABCE=   62.0000     (real)
 $_1_2A=   10.0300     (real)
 $_1_1A=   123.460     (real)
 $_1_2_TYPE="DP" (string) 
 $_1_A_TYPE="DP" (string) 
 $_1_A=   3.00000     (real)
 $_1_FOR_LINE="    for $2 in ( 1 2 3 ) loop sub " (string) 
 $_1_1_TYPE="ST" (string) 
 $_1_RR="a" (string) 
 $_1_2=   1.00000     (real)
 $_1_1="E" (string) 
 $_1_TEST=   3847.14     (real)
 $_1_J=   5.00000     (real)
 $_1_NCS=   1.00000     (real)
 $_1_EFLAG.VEAN="FALSE" (logical) 
 $_1_EFLAG.DANI="FALSE" (logical) 
 $_1_EFLAG.SANI="FALSE" (logical) 
 $_1_EFLAG.RAMA="FALSE" (logical) 
 $_1_EFLAG.ONEB="FALSE" (logical) 
 $_1_EFLAG.PROT="FALSE" (logical) 
 $_1_EFLAG.CARB="FALSE" (logical) 
 $_1_EFLAG.COUP="FALSE" (logical) 
 $_1_EFLAG.ANDB="FALSE" (logical) 
 $_1_EFLAG.DG="FALSE" (logical) 
 $_1_EFLAG.PLAN="FALSE" (logical) 
 $_1_EFLAG.XREF="FALSE" (logical) 
 $_1_EFLAG.NOE="FALSE" (logical) 
 $_1_EFLAG.NCS="FALSE" (logical) 
 $_1_EFLAG.CDIH="FALSE" (logical) 
 $_1_EFLAG.HARM="FALSE" (logical) 
 $_1_EFLAG.PELE="FALSE" (logical) 
 $_1_EFLAG.PVDW="FALSE" (logical) 
 $_1_EFLAG.ELEC="TRUE" (logical) 
 $_1_EFLAG.VDW="TRUE" (logical) 
 $_1_EFLAG.IMPR="TRUE" (logical) 
 $_1_EFLAG.DIHE="TRUE" (logical) 
 $_1_EFLAG.ANGL="TRUE" (logical) 
 $_1_EFLAG.BOND="TRUE" (logical) 
 $_1_EFLAG.GRAD="FALSE" (logical) 
 $_1_EFLAG.TEMP="FALSE" (logical) 
 $_1_EFLAG.ENER="FALSE" (logical) 
 $_1_EFLAG.TOTK="FALSE" (logical) 
 $_1_EFLAG.TOTE="FALSE" (logical) 
 $_1_BIN_NUMBER=   8.00000     (real)
 $_1_SYMMETRY=   1.00000     (real)
 $_1_CSTAR=   1.00000     (real)
 $_1_BSTAR=   1.00000     (real)
 $_1_ASTAR=   1.00000     (real)
 $_1_XRINTR_3_3=   1.00000     (real)
 $_1_XRINTR_3_2=   0.00000     (real)
 $_1_XRINTR_3_1=   0.00000     (real)
 $_1_XRINTR_2_3= -0.349148E-14 (real)
 $_1_XRINTR_2_2=   1.00000     (real)
 $_1_XRINTR_2_1=   0.00000     (real)
 $_1_XRINTR_1_3= -0.349148E-14 (real)
 $_1_XRINTR_1_2= -0.349148E-14 (real)
 $_1_XRINTR_1_1=   1.00000     (real)
 $_1_XRTR_3_3=   1.00000     (real)
 $_1_XRTR_3_2=   0.00000     (real)
 $_1_XRTR_3_1=   0.00000     (real)
 $_1_XRTR_2_3=  0.349148E-14 (real)
 $_1_XRTR_2_2=   1.00000     (real)
 $_1_XRTR_2_1=   0.00000     (real)
 $_1_XRTR_1_3=  0.349148E-14 (real)
 $_1_XRTR_1_2=  0.349148E-14 (real)
 $_1_XRTR_1_1=   1.00000     (real)
 $_1_XRCELL_6=   90.0000     (real)
 $_1_XRCELL_5=   90.0000     (real)
 $_1_XRCELL_4=   90.0000     (real)
 $_1_XRCELL_3=   1.00000     (real)
 $_1_XRCELL_2=   1.00000     (real)
 $_1_XRCELL_1=   1.00000     (real)
 $_1_VOLUME=   1.00000     (real)
 $_1_FP_EPSILON=  0.222045E-15 (real)
 $_1_CNS_PATCH="0" (string) 
 $_1_CNS_VERSION="1.3" (string) 
 $_1_LOG_LEVEL="QUIET" (string) 
 $_1_SYSTEM="x86_64/Linux" (string) 
 $_1_NAME="oeow39" (string) 
 $_1_TIMFAC=  0.488882E-01 (real)
 $_1_PI=   3.14159     (real)
 $_1_KBOLTZ=  0.198719E-02 (real)
 CNSsolve> 
 CNSsolve>do (x=0.) ( all ) 
 SELRPN:      9 atoms have been selected out of      9
 CNSsolve>do (x=x+$abce) ( all ) 
 SELRPN:      9 atoms have been selected out of      9
 CNSsolve>show (x) ( all ) 
 SELRPN:      9 atoms have been selected out of      9
 ( TEST TEST 1    A    )    62.000    
 ( TEST TEST 1    B    )    62.000    
 ( TEST TEST 1    C    )    62.000    
 ( TEST TEST 1    D    )    62.000    
 ( TEST TEST 1    E    )    62.000    
 ( TEST TEST 1    F    )    62.000    
 ( TEST TEST 1    G    )    62.000    
 ( TEST TEST 1    H    )    62.000    
 ( TEST TEST 1    I    )    62.000    
 CNSsolve> 
 CNSsolve>evaluate ($test="hell"+" abcd "+"1") 
 EVALUATE: symbol $TEST set to "hell abcd 1" (string)
 CNSsolve>evaluate ($rr=1+1.0e-03) 
 EVALUATE: symbol $RR set to    1.00100     (real)
 CNSsolve> 
 CNSsolve>{* comparisons } 
 CNSsolve> 
 CNSsolve>evaluate ($1=1.0) 
 EVALUATE: symbol $1 set to    1.00000     (real)
 CNSsolve>if ($1=1) then   end if 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>evaluate ($1=1.0+33.3-33.3+0.00000000000001) 
 EVALUATE: symbol $1 set to    1.00000     (real)
 CNSsolve>if ($1=1) then   end if 
 NEXTCD: condition evaluated as true
 CNSsolve>evaluate ($1=1.0+33.3-33.3+0.00000000001) 
 EVALUATE: symbol $1 set to    1.00000     (real)
 CNSsolve>if ($1=1) then   end if 
 NEXTCD: condition evaluated as true
 CNSsolve>evaluate ($1=1.0+33.3-33.3+0.000001) 
 EVALUATE: symbol $1 set to    1.00000     (real)
 CNSsolve>if ($1=1) then   end if 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>evaluate ($1=5.) 
 EVALUATE: symbol $1 set to    5.00000     (real)
 CNSsolve>evaluate ($2=5.) 
 EVALUATE: symbol $2 set to    5.00000     (real)
 CNSsolve>if ($1>=$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1<=$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1<$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1>$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1# $2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1=$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>evaluate ($1=5.) 
 EVALUATE: symbol $1 set to    5.00000     (real)
 CNSsolve>evaluate ($2=4.) 
 EVALUATE: symbol $2 set to    4.00000     (real)
 CNSsolve>if ($1>=$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1<=$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1<$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1>$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1# $2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1=$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>evaluate ($1="test") 
 EVALUATE: symbol $1 set to "test" (string)
 CNSsolve>evaluate ($2="test") 
 EVALUATE: symbol $2 set to "test" (string)
 CNSsolve>if ($1>=$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1<=$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1<$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1>$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1# $2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1=$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>evaluate ($1="test") 
 EVALUATE: symbol $1 set to "test" (string)
 CNSsolve>evaluate ($2="tesu") 
 EVALUATE: symbol $2 set to "tesu" (string)
 CNSsolve>if ($1>=$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1<=$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1<$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1>$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1# $2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1=$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1==$2) then end if 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>evaluate ($1="test") 
 EVALUATE: symbol $1 set to "test" (string)
 CNSsolve>evaluate ($2="tes*") 
 EVALUATE: symbol $2 set to "tes*" (string)
 CNSsolve> 
 CNSsolve>if ($1=$2) then end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1==$2) then end if 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>if (test=test) then end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if (test==test) then end if 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve> 
 CNSsolve>evaluate ($1=(1.,2.)) 
 EVALUATE: symbol $1 set to (   1.00000    ,   2.00000    ) (complex)
 CNSsolve>evaluate ($2=(1.,2.)) 
 EVALUATE: symbol $2 set to (   1.00000    ,   2.00000    ) (complex)
 CNSsolve>if ($1=$2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve>if ($1# $2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>evaluate ($1=(2.,3.)) 
 EVALUATE: symbol $1 set to (   2.00000    ,   3.00000    ) (complex)
 CNSsolve>evaluate ($2=(1.,2.)) 
 EVALUATE: symbol $2 set to (   1.00000    ,   2.00000    ) (complex)
 CNSsolve>if ($1=$2) then  end if 
 NEXTCD: condition evaluated as false
 CNSsolve>if ($1# $2) then  end if 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>{*  implicit assignment in FOR loops *} 
 CNSsolve>evaluate ($1="test") 
 EVALUATE: symbol $1 set to "test" (string)
 CNSsolve>evaluate ($2="1") 
 EVALUATE: symbol $2 set to "1" (string)
 CNSsolve>evaluate ($3=1) 
 EVALUATE: symbol $3 set to    1.00000     (real)
 CNSsolve>evaluate ($4=(4.,5)) 
 EVALUATE: symbol $4 set to (   4.00000    ,   5.00000    ) (complex)
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 Assuming literal string "A"
 FOR LOOP: symbol INDEX set to "A" (string)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to "A" (string)
 CNSsolve>  display   $index 
  A
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 Assuming literal string "B"
 FOR LOOP: symbol INDEX set to "B" (string)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to "B" (string)
 CNSsolve>  display   $index 
  B
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 Assuming literal string "D"
 FOR LOOP: symbol INDEX set to "D" (string)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to "D" (string)
 CNSsolve>  display   $index 
  D
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 Assuming literal string "E"
 FOR LOOP: symbol INDEX set to "E" (string)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to "E" (string)
 CNSsolve>  display   $index 
  E
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 FOR LOOP: symbol INDEX set to "f" (string)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to "f" (string)
 CNSsolve>  display   $index 
  f
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 FOR LOOP: symbol INDEX set to "1" (string)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to "1" (string)
 CNSsolve>  display   $index 
  1
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 FOR LOOP: symbol INDEX set to    1.00000     (real)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to    1.00000     (real)
 CNSsolve>  display   $index 
  1
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 FOR LOOP: symbol INDEX set to    2.00000     (real)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to    2.00000     (real)
 CNSsolve>  display   $index 
  2
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 FOR LOOP: symbol INDEX set to "test" (string)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to "test" (string)
 CNSsolve>  display   $index 
  test
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 FOR LOOP: symbol INDEX set to "1" (string)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to "1" (string)
 CNSsolve>  display   $index 
  1
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 FOR LOOP: symbol INDEX set to    1.00000     (real)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to    1.00000     (real)
 CNSsolve>  display   $index 
  1
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 FOR LOOP: symbol INDEX set to (   4.00000    ,   5.00000    ) (complex)
 CNSsolve>  evaluate ($index=$index) 
 EVALUATE: symbol $INDEX set to (   4.00000    ,   5.00000    ) (complex)
 CNSsolve>  display   $index 
  (4,5)
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a b d e "f" "1" 1 2 $1 $2 $3 $4 ) loop main 
 CNSsolve>  evaluate ($index=$index) 
 CNSsolve>  display   $index 
 CNSsolve>end loop main 
 CNSsolve> 
 CNSsolve>for $index in ( a "(" ")" 1 b ) loop main 
 Assuming literal string "A"
 FOR LOOP: symbol INDEX set to "A" (string)
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a "(" ")" 1 b ) loop main 
 FOR LOOP: symbol INDEX set to "(" (string)
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a "(" ")" 1 b ) loop main 
 FOR LOOP: symbol INDEX set to ")" (string)
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a "(" ")" 1 b ) loop main 
 FOR LOOP: symbol INDEX set to    1.00000     (real)
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a "(" ")" 1 b ) loop main 
 Assuming literal string "B"
 FOR LOOP: symbol INDEX set to "B" (string)
 CNSsolve>end loop main 
 CNSsolve>for $index in ( a "(" ")" 1 b ) loop main 
 CNSsolve>end loop main 
 CNSsolve> 
 CNSsolve>{* for in FOR IN ID loops *} 
 CNSsolve>for $1 in id ( name a or name b or name e or name f ) loop main 
 SELRPN:      4 atoms have been selected out of      9
 FOR ID LOOP: symbol 1 set to    1.00000     (real)
 CNSsolve>    evaluate ($1=$1) 
 EVALUATE: symbol $1 set to    1.00000     (real)
 CNSsolve>    show ( name ) ( id $1 ) 
 SELRPN:      1 atoms have been selected out of      9
 ( TEST TEST 1    A    )  A   
 CNSsolve>end loop main 
 CNSsolve>for $1 in id ( name a or name b or name e or name f ) loop main 
 FOR ID LOOP: symbol 1 set to    2.00000     (real)
 CNSsolve>    evaluate ($1=$1) 
 EVALUATE: symbol $1 set to    2.00000     (real)
 CNSsolve>    show ( name ) ( id $1 ) 
 SELRPN:      1 atoms have been selected out of      9
 ( TEST TEST 1    B    )  B   
 CNSsolve>end loop main 
 CNSsolve>for $1 in id ( name a or name b or name e or name f ) loop main 
 FOR ID LOOP: symbol 1 set to    5.00000     (real)
 CNSsolve>    evaluate ($1=$1) 
 EVALUATE: symbol $1 set to    5.00000     (real)
 CNSsolve>    show ( name ) ( id $1 ) 
 SELRPN:      1 atoms have been selected out of      9
 ( TEST TEST 1    E    )  E   
 CNSsolve>end loop main 
 CNSsolve>for $1 in id ( name a or name b or name e or name f ) loop main 
 FOR ID LOOP: symbol 1 set to    6.00000     (real)
 CNSsolve>    evaluate ($1=$1) 
 EVALUATE: symbol $1 set to    6.00000     (real)
 CNSsolve>    show ( name ) ( id $1 ) 
 SELRPN:      1 atoms have been selected out of      9
 ( TEST TEST 1    F    )  F   
 CNSsolve>end loop main 
 CNSsolve>for $1 in id ( name a or name b or name e or name f ) loop main 
 CNSsolve>    evaluate ($1=$1) 
 CNSsolve>    show ( name ) ( id $1 ) 
 CNSsolve>end loop main 
 CNSsolve> 
 CNSsolve>{* nested FOR ID loops *} 
 CNSsolve>for $1 in id ( name a or name b or name e or name f ) loop main 
 SELRPN:      4 atoms have been selected out of      9
 FOR ID LOOP: symbol 1 set to    1.00000     (real)
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 SELRPN:      2 atoms have been selected out of      9
 FOR ID LOOP: symbol 2 set to    3.00000     (real)
 CNSsolve>       display    $1   $2 
   1   3
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 FOR ID LOOP: symbol 2 set to    4.00000     (real)
 CNSsolve>       display    $1   $2 
   1   4
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 CNSsolve>       display    $1   $2 
 CNSsolve>    end loop sub 
 CNSsolve>end loop main 
 CNSsolve>for $1 in id ( name a or name b or name e or name f ) loop main 
 FOR ID LOOP: symbol 1 set to    2.00000     (real)
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 SELRPN:      2 atoms have been selected out of      9
 FOR ID LOOP: symbol 2 set to    3.00000     (real)
 CNSsolve>       display    $1   $2 
   2   3
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 FOR ID LOOP: symbol 2 set to    4.00000     (real)
 CNSsolve>       display    $1   $2 
   2   4
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 CNSsolve>       display    $1   $2 
 CNSsolve>    end loop sub 
 CNSsolve>end loop main 
 CNSsolve>for $1 in id ( name a or name b or name e or name f ) loop main 
 FOR ID LOOP: symbol 1 set to    5.00000     (real)
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 SELRPN:      2 atoms have been selected out of      9
 FOR ID LOOP: symbol 2 set to    3.00000     (real)
 CNSsolve>       display    $1   $2 
   5   3
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 FOR ID LOOP: symbol 2 set to    4.00000     (real)
 CNSsolve>       display    $1   $2 
   5   4
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 CNSsolve>       display    $1   $2 
 CNSsolve>    end loop sub 
 CNSsolve>end loop main 
 CNSsolve>for $1 in id ( name a or name b or name e or name f ) loop main 
 FOR ID LOOP: symbol 1 set to    6.00000     (real)
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 SELRPN:      2 atoms have been selected out of      9
 FOR ID LOOP: symbol 2 set to    3.00000     (real)
 CNSsolve>       display    $1   $2 
   6   3
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 FOR ID LOOP: symbol 2 set to    4.00000     (real)
 CNSsolve>       display    $1   $2 
   6   4
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 CNSsolve>       display    $1   $2 
 CNSsolve>    end loop sub 
 CNSsolve>end loop main 
 CNSsolve>for $1 in id ( name a or name b or name e or name f ) loop main 
 CNSsolve>    for $2 in id ( name c or name d ) loop sub 
 CNSsolve>       display    $1   $2 
 CNSsolve>    end loop sub 
 CNSsolve>end loop main 
 CNSsolve> 
 CNSsolve>{* nested FOR ID loops *} 
 CNSsolve>for $1 in ( "A" "B" "X" "F" ) loop main 
 FOR LOOP: symbol 1 set to "A" (string)
 CNSsolve>    for $2 in id ( name $1 ) loop sub 
 SELRPN:      1 atoms have been selected out of      9
 FOR ID LOOP: symbol 2 set to    1.00000     (real)
 CNSsolve>       display    $1   $2 
   A   1
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name $1 ) loop sub 
 CNSsolve>       display    $1   $2 
 CNSsolve>    end loop sub 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( "A" "B" "X" "F" ) loop main 
 FOR LOOP: symbol 1 set to "B" (string)
 CNSsolve>    for $2 in id ( name $1 ) loop sub 
 SELRPN:      1 atoms have been selected out of      9
 FOR ID LOOP: symbol 2 set to    2.00000     (real)
 CNSsolve>       display    $1   $2 
   B   2
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name $1 ) loop sub 
 CNSsolve>       display    $1   $2 
 CNSsolve>    end loop sub 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( "A" "B" "X" "F" ) loop main 
 FOR LOOP: symbol 1 set to "X" (string)
 CNSsolve>    for $2 in id ( name $1 ) loop sub 
 SELRPN:      0 atoms have been selected out of      9
 CNSsolve>       display    $1   $2 
 CNSsolve>    end loop sub 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( "A" "B" "X" "F" ) loop main 
 FOR LOOP: symbol 1 set to "F" (string)
 CNSsolve>    for $2 in id ( name $1 ) loop sub 
 SELRPN:      1 atoms have been selected out of      9
 FOR ID LOOP: symbol 2 set to    6.00000     (real)
 CNSsolve>       display    $1   $2 
   F   6
 CNSsolve>    end loop sub 
 CNSsolve>    for $2 in id ( name $1 ) loop sub 
 CNSsolve>       display    $1   $2 
 CNSsolve>    end loop sub 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( "A" "B" "X" "F" ) loop main 
 CNSsolve>    for $2 in id ( name $1 ) loop sub 
 CNSsolve>       display    $1   $2 
 CNSsolve>    end loop sub 
 CNSsolve>end loop main 
 CNSsolve> 
 CNSsolve>{* precision in substitutions *} 
 CNSsolve>evaluate ($1=1.234567789123455) 
 EVALUATE: symbol $1 set to    1.23457     (real)
 CNSsolve>evaluate ($2=101220.4344444) 
 EVALUATE: symbol $2 set to    101220.     (real)
 CNSsolve>display   $1   $2 
  1.23457   101220
 CNSsolve>set 
 SET>    seed=$1 
 SET>    seed ? 
 SEED=  1.2346    
 SET>end 
 CNSsolve>set precision=10 end 
 CNSsolve>display   $1   $2 
  1.234567789   101220.4344
 CNSsolve>set 
 SET>    seed=$1 
 SET>    seed ? 
 SEED=  1.2346    
 SET>end 
 CNSsolve> 
 CNSsolve>{* test display *} 
 CNSsolve>evaluate ($1="test") 
 EVALUATE: symbol $1 set to "test" (string)
 CNSsolve>evaluate ($2="1") 
 EVALUATE: symbol $2 set to "1" (string)
 CNSsolve>evaluate ($3=1) 
 EVALUATE: symbol $3 set to    1.00000     (real)
 CNSsolve>evaluate ($4=(4.,5)) 
 EVALUATE: symbol $4 set to (   4.00000    ,   5.00000    ) (complex)
 CNSsolve>display $1 $2 $3 $4 
test 1 1 (4,5)
 CNSsolve>display $1=$2($3)$4 
test=1(1)(4,5)
 CNSsolve>display "$1" 
"$1"
 CNSsolve> 
 CNSsolve>{* comment handling *} 
 CNSsolve>structure end  { this is a test !!! blah{}{}{}{!!!} blah } 
 CNSsolve>str{test test test}ucture 
 STRUcture>  ? 
 Status of internal molecular topology database:
 -> NATOM=          9(MAXA=     1000000)  NBOND=          0(MAXB=     1000000)
 -> NTHETA=         0(MAXT=     2000000)  NGRP=           1(MAXGRP=   1000000)
 -> NPHI=           0(MAXP=     2000000)  NIMPHI=         0(MAXIMP=   1000000)
 -> NNB=            0(MAXNB=    1000000) 
 STRUcture>e{{hhhhh}}nd !! testing { {{{{ 
 CNSsolve> 
 CNSsolve>{* test conversion to upper case characters *} 
 CNSsolve>evaluate ($1="ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
 EVALUATE: symbol $1 set to "ABCDEFGHIJKLMNOPQRSTUVWXYZ" (string)
 CNSsolve>evaluate ($2=abcdefghijklmnopqrstuvwxyz) 
 Assuming literal string "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
 EVALUATE: symbol $2 set to "ABCDEFGHIJKLMNOPQRSTUVWXYZ" (string)
 CNSsolve>if ($1=$2) then 
 NEXTCD: condition evaluated as true
 CNSsolve>elseif ($1 # $2) then 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>{* test "silent" mode *} 
 CNSsolve>set message=off end 
 CNSsolve>set echo=off end 
  A
  B
  D
  E
 OK !!!
 CNSsolve>set display=parsertest.dat end 
 ASSFIL: file parsertest.dat opened.
 CNSsolve>display   structure 
 CNSsolve>display   end 
 CNSsolve>close parsertest.dat end 
 VCLOSE: Display file reset to OUTPUT.
 CNSsolve> 
 CNSsolve>@parsertest.dat 
 ASSFIL: file parsertest.dat opened.
 CNSsolve>  structure 
 STRUcture>  end 
 CNSsolve> 
 CNSsolve>for $1 in ( e r d ) loop main 
 Assuming literal string "E"
 FOR LOOP: symbol 1 set to "E" (string)
 CNSsolve>   @parsertest.dat  set precision=6 end 
 ASSFIL: file parsertest.dat opened.
 CNSsolve>  structure 
 STRUcture>  end 
 CNSsolve>  set precision=6 end 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( e r d ) loop main 
 Assuming literal string "R"
 FOR LOOP: symbol 1 set to "R" (string)
 CNSsolve>    
 CNSsolve>  structure 
 STRUcture>  end 
 CNSsolve> 
 CNSsolve>  set precision=6 end 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( e r d ) loop main 
 Assuming literal string "D"
 FOR LOOP: symbol 1 set to "D" (string)
 CNSsolve>    
 CNSsolve>  structure 
 STRUcture>  end 
 CNSsolve> 
 CNSsolve>  set precision=6 end 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( e r d ) loop main 
 CNSsolve>    
 CNSsolve>  structure 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  set precision=6 end 
 CNSsolve>end loop main 
 CNSsolve> 
 CNSsolve>for $1 in ( e r d ) loop main 
 Assuming literal string "E"
 FOR LOOP: symbol 1 set to "E" (string)
 CNSsolve>   @@parsertest.dat set precision=6 end 
 ASSFIL: file parsertest.dat opened.
 CNSsolve>  structure 
 STRUcture>  end 
 CNSsolve> set precision=6 end 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( e r d ) loop main 
 Assuming literal string "R"
 FOR LOOP: symbol 1 set to "R" (string)
 CNSsolve>   @@parsertest.dat set precision=6 end 
 ASSFIL: file parsertest.dat opened.
 CNSsolve>  structure 
 STRUcture>  end 
 CNSsolve> set precision=6 end 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( e r d ) loop main 
 Assuming literal string "D"
 FOR LOOP: symbol 1 set to "D" (string)
 CNSsolve>   @@parsertest.dat set precision=6 end 
 ASSFIL: file parsertest.dat opened.
 CNSsolve>  structure 
 STRUcture>  end 
 CNSsolve> set precision=6 end 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( e r d ) loop main 
 CNSsolve>   @@parsertest.dat set precision=6 end 
 CNSsolve>end loop main 
 CNSsolve> 
 CNSsolve>set display=OUTPUT end 
 CNSsolve> 
 CNSsolve>display   $EXIST_CPU 
  TRUE
 CNSsolve>evaluate ($rrr=1234) 
 EVALUATE: symbol $RRR set to    1234.00     (real)
 CNSsolve>display   $EXIST_RRR 
  TRUE
 CNSsolve>display   $EXIST_rrt 
  FALSE
 CNSsolve> 
 CNSsolve>{* test FORMAT specs for symbols *} 
 CNSsolve>evaluate ($abcd=10.4) 
 EVALUATE: symbol $ABCD set to    10.4000     (real)
 CNSsolve>display  $abcd 
 10.4
 CNSsolve>display  $abcd[E10.4] 
 0.1040E+02
 CNSsolve>display  $abcd[G14.5] 
     10.400    
 CNSsolve>evaluate ($abcd2=3.4) 
 EVALUATE: symbol $ABCD2 set to    3.40000     (real)
 CNSsolve>evaluate ($abcd1=1.2) 
 EVALUATE: symbol $ABCD1 set to    1.20000     (real)
 CNSsolve>display  $abcd[F10.4]   $abcd2[F10.4]  $abcd1[F10.4] 
    10.4000       3.4000      1.2000
 CNSsolve>evaluate ($abcd=1770.4) 
 EVALUATE: symbol $ABCD set to    1770.40     (real)
 CNSsolve>evaluate ($abcd2=333.4) 
 EVALUATE: symbol $ABCD2 set to    333.400     (real)
 CNSsolve>evaluate ($abcd1=43431.24) 
 EVALUATE: symbol $ABCD1 set to    43431.2     (real)
 CNSsolve>display  $abcd[F10.4]   $abcd2[F10.4]  $abcd1[F10.4] 
  1770.4000     333.4000  43431.2400
 CNSsolve> 
 CNSsolve> 
 CNSsolve>evaluate ($abcd=(1.,2.)) 
 EVALUATE: symbol $ABCD set to (   1.00000    ,   2.00000    ) (complex)
 CNSsolve>display  $abcd 
 (1,2)
 CNSsolve>display  $abcd[F10.4] 
     1.0000    2.0000
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>xray 
 XRAY> 
 XRAY>  symmetry=( X,Y,Z ) 
 XRAY>  symmetry=( 1/2-X,-Y,1/2+Z ) 
 XRAY>  symmetry=( -X,1/2+Y,1/2-Z ) 
 XRAY>  symmetry=( 1/2+X,1/2-Y,-Z ) 
 XRAY> 
 XRAY>   display  { SYMMETRY_OP_1 }  symmetry = $symmetry_op_1 
 { SYMMETRY_OP_1 }  symmetry = (X,Y,Z)
 XRAY>   display  { SYMMETRY_OP_2 }  symmetry = $symmetry_op_2 
 { SYMMETRY_OP_2 }  symmetry = (1/2-X,-Y,1/2+Z)
 XRAY>   display  { SYMMETRY_OP_3 }  symmetry = $symmetry_op_3 
 { SYMMETRY_OP_3 }  symmetry = (-X,1/2+Y,1/2-Z)
 XRAY>   display  { SYMMETRY_OP_4 }  symmetry = $symmetry_op_4 
 { SYMMETRY_OP_4 }  symmetry = (1/2+X,1/2-Y,-Z)
 XRAY> 
 XRAY>   evaluate ($i=0) 
 EVALUATE: symbol $I set to    0.00000     (real)
 XRAY>   while ($i < 4) loop disp 
 NEXTCD: condition evaluated as true
 XRAY>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    1.00000     (real)
 XRAY>      display symmetry = $symmetry_op_$i 
symmetry = (X,Y,Z)
 XRAY>   end loop disp 
 XRAY>   while ($i < 4) loop disp 
 NEXTCD: condition evaluated as true
 XRAY>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    2.00000     (real)
 XRAY>      display symmetry = $symmetry_op_$i 
symmetry = (1/2-X,-Y,1/2+Z)
 XRAY>   end loop disp 
 XRAY>   while ($i < 4) loop disp 
 NEXTCD: condition evaluated as true
 XRAY>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    3.00000     (real)
 XRAY>      display symmetry = $symmetry_op_$i 
symmetry = (-X,1/2+Y,1/2-Z)
 XRAY>   end loop disp 
 XRAY>   while ($i < 4) loop disp 
 NEXTCD: condition evaluated as true
 XRAY>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    4.00000     (real)
 XRAY>      display symmetry = $symmetry_op_$i 
symmetry = (1/2+X,1/2-Y,-Z)
 XRAY>   end loop disp 
 XRAY>   while ($i < 4) loop disp 
 NEXTCD: condition evaluated as false
 XRAY>      evaluate ($i=$i+1) 
 XRAY>      display symmetry = $symmetry_op_$i 
 XRAY>   end loop disp 
 XRAY> 
 XRAY>   evaluate ($i=0) 
 EVALUATE: symbol $I set to    0.00000     (real)
 XRAY>   evaluate ($x=op) 
 Assuming literal string "OP"
 EVALUATE: symbol $X set to "OP" (string)
 XRAY>   while ($i < 4) loop disp 
 NEXTCD: condition evaluated as true
 XRAY>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    1.00000     (real)
 XRAY>      display symmetry = $symmetry_$x_$i 
symmetry = (X,Y,Z)
 XRAY>   end loop disp 
 XRAY>   while ($i < 4) loop disp 
 NEXTCD: condition evaluated as true
 XRAY>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    2.00000     (real)
 XRAY>      display symmetry = $symmetry_$x_$i 
symmetry = (1/2-X,-Y,1/2+Z)
 XRAY>   end loop disp 
 XRAY>   while ($i < 4) loop disp 
 NEXTCD: condition evaluated as true
 XRAY>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    3.00000     (real)
 XRAY>      display symmetry = $symmetry_$x_$i 
symmetry = (-X,1/2+Y,1/2-Z)
 XRAY>   end loop disp 
 XRAY>   while ($i < 4) loop disp 
 NEXTCD: condition evaluated as true
 XRAY>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    4.00000     (real)
 XRAY>      display symmetry = $symmetry_$x_$i 
symmetry = (1/2+X,1/2-Y,-Z)
 XRAY>   end loop disp 
 XRAY>   while ($i < 4) loop disp 
 NEXTCD: condition evaluated as false
 XRAY>      evaluate ($i=$i+1) 
 XRAY>      display symmetry = $symmetry_$x_$i 
 XRAY>   end loop disp 
 XRAY> 
 XRAY>end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>   evaluate ($i=0) 
 EVALUATE: symbol $I set to    0.00000     (real)
 CNSsolve>   evaluate ($sum=0) 
 EVALUATE: symbol $SUM set to    0.00000     (real)
 CNSsolve> 
 CNSsolve>   while ($i < 3) loop i 
 NEXTCD: condition evaluated as true
 CNSsolve>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    1.00000     (real)
 CNSsolve> 
 CNSsolve>      evaluate ($j=0) 
 EVALUATE: symbol $J set to    0.00000     (real)
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>        evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    1.00000     (real)
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 EVALUATE: symbol $A_1_1 set to    2.00000     (real)
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 EVALUATE: symbol $SUM set to    2.00000     (real)
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
i= 1  j= 1   a(i,j)= 2   sum= 2
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>        evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    2.00000     (real)
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 EVALUATE: symbol $A_1_2 set to    3.00000     (real)
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 EVALUATE: symbol $SUM set to    5.00000     (real)
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
i= 1  j= 2   a(i,j)= 3   sum= 5
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>        evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 EVALUATE: symbol $A_1_3 set to    4.00000     (real)
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 EVALUATE: symbol $SUM set to    9.00000     (real)
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
i= 1  j= 3   a(i,j)= 4   sum= 9
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as false
 CNSsolve>        evaluate ($j=$j+1) 
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve> 
 CNSsolve>   end loop i 
 CNSsolve>   while ($i < 3) loop i 
 NEXTCD: condition evaluated as true
 CNSsolve>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    2.00000     (real)
 CNSsolve> 
 CNSsolve>      evaluate ($j=0) 
 EVALUATE: symbol $J set to    0.00000     (real)
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>        evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    1.00000     (real)
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 EVALUATE: symbol $A_2_1 set to    3.00000     (real)
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 EVALUATE: symbol $SUM set to    12.0000     (real)
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
i= 2  j= 1   a(i,j)= 3   sum= 12
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>        evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    2.00000     (real)
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 EVALUATE: symbol $A_2_2 set to    4.00000     (real)
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 EVALUATE: symbol $SUM set to    16.0000     (real)
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
i= 2  j= 2   a(i,j)= 4   sum= 16
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>        evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 EVALUATE: symbol $A_2_3 set to    5.00000     (real)
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 EVALUATE: symbol $SUM set to    21.0000     (real)
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
i= 2  j= 3   a(i,j)= 5   sum= 21
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as false
 CNSsolve>        evaluate ($j=$j+1) 
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve> 
 CNSsolve>   end loop i 
 CNSsolve>   while ($i < 3) loop i 
 NEXTCD: condition evaluated as true
 CNSsolve>      evaluate ($i=$i+1) 
 EVALUATE: symbol $I set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>      evaluate ($j=0) 
 EVALUATE: symbol $J set to    0.00000     (real)
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>        evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    1.00000     (real)
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 EVALUATE: symbol $A_3_1 set to    4.00000     (real)
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 EVALUATE: symbol $SUM set to    25.0000     (real)
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
i= 3  j= 1   a(i,j)= 4   sum= 25
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>        evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    2.00000     (real)
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 EVALUATE: symbol $A_3_2 set to    5.00000     (real)
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 EVALUATE: symbol $SUM set to    30.0000     (real)
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
i= 3  j= 2   a(i,j)= 5   sum= 30
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as true
 CNSsolve>        evaluate ($j=$j+1) 
 EVALUATE: symbol $J set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 EVALUATE: symbol $A_3_3 set to    6.00000     (real)
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 EVALUATE: symbol $SUM set to    36.0000     (real)
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
i= 3  j= 3   a(i,j)= 6   sum= 36
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve>      while ($j < 3) loop j 
 NEXTCD: condition evaluated as false
 CNSsolve>        evaluate ($j=$j+1) 
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve> 
 CNSsolve>   end loop i 
 CNSsolve>   while ($i < 3) loop i 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate ($i=$i+1) 
 CNSsolve> 
 CNSsolve>      evaluate ($j=0) 
 CNSsolve>      while ($j < 3) loop j 
 CNSsolve>        evaluate ($j=$j+1) 
 CNSsolve> 
 CNSsolve>        evaluate ($a_$i_$j=$i+$j) 
 CNSsolve>        evaluate ($sum=$sum+$a_$i_$j) 
 CNSsolve>        display i= $i  j= $j   a(i,j)= $a_$i_$j   sum= $sum 
 CNSsolve> 
 CNSsolve>      end loop j 
 CNSsolve> 
 CNSsolve>   end loop i 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>eval ($junk="$junk") 
 EVALUATE: symbol $JUNK set to "$junk" (string)
 CNSsolve>set display=abcd.dat end 
 ASSFIL: file abcd.dat opened.
 CNSsolve>display  a b c d 
 CNSsolve>display 1 2 3 4 
 CNSsolve>display $junk 
 CNSsolve> 
 CNSsolve>set display=OUTPUT end 
 CNSsolve>close abcd.dat end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>evaluate ($junk=(1.0, 2.0)) 
 EVALUATE: symbol $JUNK set to (   1.00000    ,   2.00000    ) (complex)
 CNSsolve> 
 CNSsolve>{* TEST 1 ------------------ } 
 CNSsolve>for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 Assuming literal string "A"
 FOR LOOP: symbol 1 set to "A" (string)
 CNSsolve> 
 CNSsolve>  display $for_line 
for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve>  display $1 $1_type 
A ST
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 Assuming literal string "B"
 FOR LOOP: symbol 1 set to "B" (string)
 CNSsolve> 
 CNSsolve>  display $for_line 
for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve>  display $1 $1_type 
B ST
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 Assuming literal string "C"
 FOR LOOP: symbol 1 set to "C" (string)
 CNSsolve> 
 CNSsolve>  display $for_line 
for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve>  display $1 $1_type 
C ST
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 Assuming literal string "D"
 FOR LOOP: symbol 1 set to "D" (string)
 CNSsolve> 
 CNSsolve>  display $for_line 
for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve>  display $1 $1_type 
D ST
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 FOR LOOP: symbol 1 set to    1.00000     (real)
 CNSsolve> 
 CNSsolve>  display $for_line 
for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve>  display $1 $1_type 
1 DP
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 FOR LOOP: symbol 1 set to    2.00000     (real)
 CNSsolve> 
 CNSsolve>  display $for_line 
for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve>  display $1 $1_type 
2 DP
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 FOR LOOP: symbol 1 set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>  display $for_line 
for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve>  display $1 $1_type 
3 DP
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 FOR LOOP: symbol 1 set to    4.00000     (real)
 CNSsolve> 
 CNSsolve>  display $for_line 
for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve>  display $1 $1_type 
4 DP
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 FOR LOOP: symbol 1 set to (   1.00000    ,   2.00000    ) (complex)
 CNSsolve> 
 CNSsolve>  display $for_line 
for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve>  display $1 $1_type 
(1,2) DC
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
 CNSsolve>  display $1 $1_type 
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
for $1 in ( a b c d 1 2 3 4 $junk) loop main 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>{* TEST 2 ------------------ } 
 CNSsolve>for $1 in ( @abcd.dat ) loop main 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 Assuming literal string "A"
 FOR LOOP: symbol 1 set to "A" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= ) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
A ST
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 Assuming literal string "B"
 FOR LOOP: symbol 1 set to "B" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
B ST
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 Assuming literal string "C"
 FOR LOOP: symbol 1 set to "C" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
C ST
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 Assuming literal string "D"
 FOR LOOP: symbol 1 set to "D" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
D ST
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    1.00000     (real)
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
1 DP
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    2.00000     (real)
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
2 DP
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    3.00000     (real)
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
3 DP
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    4.00000     (real)
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
4 DP
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR-clause$junk 
 FOR LOOP: symbol 1 set to (   1.00000    ,   2.00000    ) (complex)
 FOR-clause= 
 FOR-clause= ) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
$junk 
 CNSsolve>  display $1 $1_type 
(1,2) DC
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR-clause$junk 
 FOR-clause 
 FOR-clause ) loop main 
 CNSsolve> 
 CNSsolve>  display $for_line 
 CNSsolve>  display $1 $1_type 
 CNSsolve> 
 CNSsolve>end loop main 
 CNSsolve>  display $for_line 
$junk 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>{* TEST 3 ------------------ } 
 CNSsolve>evaluate ($file="abcd.dat") 
 EVALUATE: symbol $FILE set to "abcd.dat" (string)
 CNSsolve> 
 CNSsolve>for $1 in ( @$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 Assuming literal string "A"
 FOR LOOP: symbol 1 set to "A" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
A ST
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 Assuming literal string "B"
 FOR LOOP: symbol 1 set to "B" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
B ST
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 Assuming literal string "C"
 FOR LOOP: symbol 1 set to "C" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
C ST
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 Assuming literal string "D"
 FOR LOOP: symbol 1 set to "D" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
D ST
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    1.00000     (real)
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
1 DP
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    2.00000     (real)
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
2 DP
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    3.00000     (real)
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
3 DP
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    4.00000     (real)
 FOR-clause=$junk 
 FOR-clause= 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
4 DP
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR-clause$junk 
 FOR LOOP: symbol 1 set to (   1.00000    ,   2.00000    ) (complex)
 FOR-clause= 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
$junk 
 CNSsolve>  display $1 $1_type 
(1,2) DC
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in (  
 FOR-clause a b c d 
 FOR-clause1 2 3 4 
 FOR-clause$junk 
 FOR-clause 
 FOR-clause ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 CNSsolve>  display $1 $1_type 
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>  display $for_line 
$junk 
 CNSsolve> 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 Assuming literal string "A"
 FOR LOOP: symbol 1 set to "A" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
A ST
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 Assuming literal string "B"
 FOR LOOP: symbol 1 set to "B" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
B ST
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 Assuming literal string "C"
 FOR LOOP: symbol 1 set to "C" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
C ST
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 Assuming literal string "D"
 FOR LOOP: symbol 1 set to "D" (string)
 FOR-clause=1 2 3 4 
 FOR-clause=$junk 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 a b c d 
 CNSsolve>  display $1 $1_type 
D ST
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    1.00000     (real)
 FOR-clause=$junk 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
1 DP
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    2.00000     (real)
 FOR-clause=$junk 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
2 DP
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    3.00000     (real)
 FOR-clause=$junk 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
3 DP
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 FOR-clause1 2 3 4 
 FOR LOOP: symbol 1 set to    4.00000     (real)
 FOR-clause=$junk 
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
1 2 3 4 
 CNSsolve>  display $1 $1_type 
4 DP
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 FOR-clause1 2 3 4 
 FOR-clause$junk 
 FOR LOOP: symbol 1 set to (   1.00000    ,   2.00000    ) (complex)
 FOR-clause= ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
$junk 
 CNSsolve>  display $1 $1_type 
(1,2) DC
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 ASSFIL: file abcd.dat opened.
 FOR-clause= a b c d 
 FOR-clause1 2 3 4 
 FOR-clause$junk 
 FOR-clause ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 CNSsolve>  display $1 $1_type 
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>  display $for_line 
$junk 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>{* TEST 4 ------------------ } 
 CNSsolve>evaluate ($file="abcd.dat") 
 EVALUATE: symbol $FILE set to "abcd.dat" (string)
 CNSsolve>evaluate ($i=1) 
 EVALUATE: symbol $I set to    1.00000     (real)
 CNSsolve> 
 CNSsolve>if ($i > 2) then 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>for $1 in ( @@$file ) loop inp 
 CNSsolve> 
 CNSsolve>  display $for_line 
 CNSsolve>  display $1 $1_type 
 CNSsolve> 
 CNSsolve>end loop inp 
 CNSsolve>  display $for_line 
 CNSsolve> 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>fileexist parsertest.dat end 
 MISCOM: file exists
 CNSsolve>display  $RESULT 
 TRUE
 CNSsolve>fileexist parsertest.junk end 
 MISCOM: file does not exist
 CNSsolve>display  $RESULT 
 FALSE
 CNSsolve> 
 CNSsolve> 
 CNSsolve>write coor end 
REMARK FILENAME="OUTPUT"
REMARK  parsertest.inp
REMARK  test CNS parser
REMARK  Axel T. Brunger
REMARK DATE:05-Jul-2018  16:08:05       created by user: oeow39
REMARK VERSION:1.3
ATOM      1  A   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      2  B   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      3  C   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      4  D   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      5  E   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      6  F   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      7  G   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      8  H   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      9  I   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
END
 CNSsolve> 
 CNSsolve>remarks testing 
 CNSsolve> 
 CNSsolve>write coor end 
REMARK FILENAME="OUTPUT"
REMARK testing
REMARK DATE:05-Jul-2018  16:08:05       created by user: oeow39
REMARK VERSION:1.3
ATOM      1  A   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      2  B   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      3  C   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      4  D   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      5  E   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      6  F   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      7  G   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      8  H   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      9  I   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
END
 CNSsolve> 
 CNSsolve> 
 CNSsolve>set remarks=accu end 
 CNSsolve> 
 CNSsolve>remarks  testing 1 
 CNSsolve> 
 CNSsolve>display ttt 
ttt
 CNSsolve> 
 CNSsolve>remarks  testing 2 
 CNSsolve> 
 CNSsolve>write coor end 
REMARK FILENAME="OUTPUT"
REMARK testing
REMARK DATE:05-Jul-2018  16:08:05       created by user: oeow39
REMARK VERSION:1.3
REMARK  testing 1
REMARK  testing 2
REMARK DATE:05-Jul-2018  16:08:05       created by user: oeow39
REMARK VERSION:1.3
ATOM      1  A   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      2  B   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      3  C   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      4  D   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      5  E   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      6  F   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      7  G   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      8  H   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      9  I   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
END
 CNSsolve> 
 CNSsolve>set remarks =reset end 
 CNSsolve> 
 CNSsolve>write coor end 
REMARK FILENAME="OUTPUT"
REMARK DATE:05-Jul-2018  16:08:05       created by user: oeow39
REMARK VERSION:1.3
ATOM      1  A   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      2  B   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      3  C   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      4  D   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      5  E   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      6  F   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      7  G   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      8  H   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
ATOM      9  I   TEST    1      62.0009999.0009999.000  1.00  0.00      TEST
END
 CNSsolve> 
 CNSsolve>eval ($1=1) 
 EVALUATE: symbol $1 set to    1.00000     (real)
 CNSsolve>eval ($rr_$1="tt") 
 EVALUATE: symbol $RR_1 set to "tt" (string)
 CNSsolve> 
 CNSsolve>display  $exist_rr_$1 
 TRUE
 CNSsolve> 
 CNSsolve>eval ($1=2) 
 EVALUATE: symbol $1 set to    2.00000     (real)
 CNSsolve>display  $exist_rr_$1 
 FALSE
 CNSsolve> 
 CNSsolve>eval ( $test1 = 1 ) 
 EVALUATE: symbol $TEST1 set to    1.00000     (real)
 CNSsolve>eval ( $idx_$test1 = 10 ) 
 EVALUATE: symbol $IDX_1 set to    10.0000     (real)
 CNSsolve> 
 CNSsolve>eval ( $test2 = 2 ) 
 EVALUATE: symbol $TEST2 set to    2.00000     (real)
 CNSsolve>eval ( $test3 = "works" ) 
 EVALUATE: symbol $TEST3 set to "works" (string)
 CNSsolve> 
 CNSsolve>eval ( $sym.$test2.hi = 2 ) 
 EVALUATE: symbol $SYM.2.HI set to    2.00000     (real)
 CNSsolve>eval ( $sym.$test3.hi = 3 ) 
 EVALUATE: symbol $SYM.WORKS.HI set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>eval ( $t1 = 1 ) 
 EVALUATE: symbol $T1 set to    1.00000     (real)
 CNSsolve>eval ( $t2 = 2 ) 
 EVALUATE: symbol $T2 set to    2.00000     (real)
 CNSsolve>eval ( $t3 = 3 ) 
 EVALUATE: symbol $T3 set to    3.00000     (real)
 CNSsolve>eval ( $t_4_m = 4 ) 
 EVALUATE: symbol $T_4_M set to    4.00000     (real)
 CNSsolve> 
 CNSsolve>eval ( $sym.$t1.$t2 = 3 ) 
 EVALUATE: symbol $SYM.1.2 set to    3.00000     (real)
 CNSsolve>eval ( $sym_$t1_$t2 = 3 ) 
 EVALUATE: symbol $SYM_1_2 set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>eval ( $sym.$t1_$t2.$t3 = 3 ) 
 EVALUATE: symbol $SYM.1_2.3 set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>! check that underscores are being parsed properly 
 CNSsolve> 
 CNSsolve>eval ( $s_s_$t1_$t_4_m_$t3 = 3 ) 
 EVALUATE: symbol $S_S_1_4_3 set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>set abort = off end 
 CNSsolve> 
 CNSsolve>! illegals 
 CNSsolve> 
 CNSsolve>eval ( $fail1 = -1.0 ) 
 EVALUATE: symbol $FAIL1 set to   -1.00000     (real)
 CNSsolve>eval ( $fail2 = (3,4) ) 
 EVALUATE: symbol $FAIL2 set to (   3.00000    ,   4.00000    ) (complex)
 CNSsolve>eval ( $fail3 = 1e29 ) 
 EVALUATE: symbol $FAIL3 set to   0.100000E+30 (real)
 CNSsolve>eval ( $fail4 = 1.25 ) 
 EVALUATE: symbol $FAIL4 set to    1.25000     (real)
 CNSsolve> 
 CNSsolve>eval ( $sym.$fail1.hi = 4 ) 
 %SYMIDX error encountered: Illegal symbol value, must be integer or character string.
   (CNS is in mode: SET ABORT=OFF END)
 EVALUATE: symbol $SYM.$FAIL1.HI set to    4.00000     (real)
 CNSsolve>eval ( $sym.$fail2.hi = 5 ) 
 %SYMIDX error encountered: Illegal symbol type, must be integer or character string.
   (CNS is in mode: SET ABORT=OFF END)
 EVALUATE: symbol $SYM.$FAIL2.HI set to    5.00000     (real)
 CNSsolve>eval ( $sym.$fail3.hi = 6 ) 
 %SYMIDX error encountered: Illegal symbol value, must be integer or character string.
   (CNS is in mode: SET ABORT=OFF END)
 EVALUATE: symbol $SYM.$FAIL3.HI set to    6.00000     (real)
 CNSsolve>eval ( $sym.$fail4.hi = 7 ) 
 %SYMIDX error encountered: Illegal symbol value, must be integer or character string.
   (CNS is in mode: SET ABORT=OFF END)
 EVALUATE: symbol $SYM.$FAIL4.HI set to    7.00000     (real)
 CNSsolve> 
 CNSsolve>eval ( $sym.$_fail5.hi = 8 ) 
 %SYMIDX-WRN: index-symbol $_FAIL5 not found.
 EVALUATE: symbol $SYM.$_FAIL5.HI set to    8.00000     (real)
 CNSsolve> 
 CNSsolve> 
 CNSsolve>! let's try an array 
 CNSsolve>eval ( $x = 1 ) 
 EVALUATE: symbol $X set to    1.00000     (real)
 CNSsolve>while ( $x lt 10 ) loop xloop 
 NEXTCD: condition evaluated as true
 CNSsolve>eval ( $y = 1 ) 
 EVALUATE: symbol $Y set to    1.00000     (real)
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.1.1 set to    1.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    2.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.1.2 set to    2.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    3.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.1.3 set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    4.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.1.4 set to    4.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    5.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.1.5 set to    5.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    6.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.1.6 set to    6.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    7.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.1.7 set to    7.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    8.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.1.8 set to    8.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    9.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.1.9 set to    9.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    10.0000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 CNSsolve>end loop yloop 
 CNSsolve> 
 CNSsolve>eval ( $x = $x + 1 ) 
 EVALUATE: symbol $X set to    2.00000     (real)
 CNSsolve>end loop xloop 
 CNSsolve>while ( $x lt 10 ) loop xloop 
 NEXTCD: condition evaluated as true
 CNSsolve>eval ( $y = 1 ) 
 EVALUATE: symbol $Y set to    1.00000     (real)
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.2.1 set to    2.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    2.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.2.2 set to    4.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    3.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.2.3 set to    6.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    4.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.2.4 set to    8.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    5.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.2.5 set to    10.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    6.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.2.6 set to    12.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    7.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.2.7 set to    14.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    8.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.2.8 set to    16.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    9.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.2.9 set to    18.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    10.0000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 CNSsolve>end loop yloop 
 CNSsolve> 
 CNSsolve>eval ( $x = $x + 1 ) 
 EVALUATE: symbol $X set to    3.00000     (real)
 CNSsolve>end loop xloop 
 CNSsolve>while ( $x lt 10 ) loop xloop 
 NEXTCD: condition evaluated as true
 CNSsolve>eval ( $y = 1 ) 
 EVALUATE: symbol $Y set to    1.00000     (real)
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.3.1 set to    3.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    2.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.3.2 set to    6.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    3.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.3.3 set to    9.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    4.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.3.4 set to    12.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    5.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.3.5 set to    15.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    6.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.3.6 set to    18.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    7.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.3.7 set to    21.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    8.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.3.8 set to    24.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    9.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.3.9 set to    27.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    10.0000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 CNSsolve>end loop yloop 
 CNSsolve> 
 CNSsolve>eval ( $x = $x + 1 ) 
 EVALUATE: symbol $X set to    4.00000     (real)
 CNSsolve>end loop xloop 
 CNSsolve>while ( $x lt 10 ) loop xloop 
 NEXTCD: condition evaluated as true
 CNSsolve>eval ( $y = 1 ) 
 EVALUATE: symbol $Y set to    1.00000     (real)
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.4.1 set to    4.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    2.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.4.2 set to    8.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    3.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.4.3 set to    12.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    4.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.4.4 set to    16.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    5.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.4.5 set to    20.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    6.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.4.6 set to    24.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    7.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.4.7 set to    28.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    8.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.4.8 set to    32.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    9.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.4.9 set to    36.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    10.0000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 CNSsolve>end loop yloop 
 CNSsolve> 
 CNSsolve>eval ( $x = $x + 1 ) 
 EVALUATE: symbol $X set to    5.00000     (real)
 CNSsolve>end loop xloop 
 CNSsolve>while ( $x lt 10 ) loop xloop 
 NEXTCD: condition evaluated as true
 CNSsolve>eval ( $y = 1 ) 
 EVALUATE: symbol $Y set to    1.00000     (real)
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.5.1 set to    5.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    2.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.5.2 set to    10.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    3.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.5.3 set to    15.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    4.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.5.4 set to    20.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    5.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.5.5 set to    25.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    6.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.5.6 set to    30.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    7.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.5.7 set to    35.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    8.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.5.8 set to    40.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    9.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.5.9 set to    45.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    10.0000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 CNSsolve>end loop yloop 
 CNSsolve> 
 CNSsolve>eval ( $x = $x + 1 ) 
 EVALUATE: symbol $X set to    6.00000     (real)
 CNSsolve>end loop xloop 
 CNSsolve>while ( $x lt 10 ) loop xloop 
 NEXTCD: condition evaluated as true
 CNSsolve>eval ( $y = 1 ) 
 EVALUATE: symbol $Y set to    1.00000     (real)
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.6.1 set to    6.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    2.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.6.2 set to    12.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    3.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.6.3 set to    18.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    4.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.6.4 set to    24.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    5.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.6.5 set to    30.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    6.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.6.6 set to    36.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    7.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.6.7 set to    42.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    8.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.6.8 set to    48.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    9.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.6.9 set to    54.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    10.0000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 CNSsolve>end loop yloop 
 CNSsolve> 
 CNSsolve>eval ( $x = $x + 1 ) 
 EVALUATE: symbol $X set to    7.00000     (real)
 CNSsolve>end loop xloop 
 CNSsolve>while ( $x lt 10 ) loop xloop 
 NEXTCD: condition evaluated as true
 CNSsolve>eval ( $y = 1 ) 
 EVALUATE: symbol $Y set to    1.00000     (real)
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.7.1 set to    7.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    2.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.7.2 set to    14.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    3.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.7.3 set to    21.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    4.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.7.4 set to    28.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    5.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.7.5 set to    35.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    6.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.7.6 set to    42.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    7.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.7.7 set to    49.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    8.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.7.8 set to    56.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    9.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.7.9 set to    63.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    10.0000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 CNSsolve>end loop yloop 
 CNSsolve> 
 CNSsolve>eval ( $x = $x + 1 ) 
 EVALUATE: symbol $X set to    8.00000     (real)
 CNSsolve>end loop xloop 
 CNSsolve>while ( $x lt 10 ) loop xloop 
 NEXTCD: condition evaluated as true
 CNSsolve>eval ( $y = 1 ) 
 EVALUATE: symbol $Y set to    1.00000     (real)
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.8.1 set to    8.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    2.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.8.2 set to    16.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    3.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.8.3 set to    24.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    4.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.8.4 set to    32.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    5.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.8.5 set to    40.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    6.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.8.6 set to    48.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    7.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.8.7 set to    56.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    8.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.8.8 set to    64.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    9.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.8.9 set to    72.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    10.0000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 CNSsolve>end loop yloop 
 CNSsolve> 
 CNSsolve>eval ( $x = $x + 1 ) 
 EVALUATE: symbol $X set to    9.00000     (real)
 CNSsolve>end loop xloop 
 CNSsolve>while ( $x lt 10 ) loop xloop 
 NEXTCD: condition evaluated as true
 CNSsolve>eval ( $y = 1 ) 
 EVALUATE: symbol $Y set to    1.00000     (real)
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.9.1 set to    9.00000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    2.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.9.2 set to    18.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    3.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.9.3 set to    27.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    4.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.9.4 set to    36.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    5.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.9.5 set to    45.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    6.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.9.6 set to    54.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    7.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.9.7 set to    63.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    8.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.9.8 set to    72.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    9.00000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 EVALUATE: symbol $ARRAY.9.9 set to    81.0000     (real)
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 EVALUATE: symbol $Y set to    10.0000     (real)
 CNSsolve>end loop yloop 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 CNSsolve>end loop yloop 
 CNSsolve> 
 CNSsolve>eval ( $x = $x + 1 ) 
 EVALUATE: symbol $X set to    10.0000     (real)
 CNSsolve>end loop xloop 
 CNSsolve>while ( $x lt 10 ) loop xloop 
 NEXTCD: condition evaluated as false
 CNSsolve>eval ( $y = 1 ) 
 CNSsolve>while ( $y lt 10 ) loop yloop 
 CNSsolve> 
 CNSsolve>  eval ( $array.$x.$y = $x * $y ) 
 CNSsolve> 
 CNSsolve>  eval ( $y = $y + 1 ) 
 CNSsolve>end loop yloop 
 CNSsolve> 
 CNSsolve>eval ( $x = $x + 1 ) 
 CNSsolve>end loop xloop 
 CNSsolve> 
 CNSsolve>set echo = off end 
  1   2   3   4   5   6   7   8   9
  2   4   6   8  10  12  14  16  18
  3   6   9  12  15  18  21  24  27
  4   8  12  16  20  24  28  32  36
  5  10  15  20  25  30  35  40  45
  6  12  18  24  30  36  42  48  54
  7  14  21  28  35  42  49  56  63
  8  16  24  32  40  48  56  64  72
  9  18  27  36  45  54  63  72  81
 CNSsolve>set message = norm end 
 CNSsolve> 
 CNSsolve>$? 
 Current Symbol Table
 NOTE: The scope number (#) of $<name> is shown as $_#_<name> 
 $_1_ARRAY.9.9=   81.0000     (real)
 $_1_ARRAY.9.8=   72.0000     (real)
 $_1_ARRAY.9.7=   63.0000     (real)
 $_1_ARRAY.9.6=   54.0000     (real)
 $_1_ARRAY.9.5=   45.0000     (real)
 $_1_ARRAY.9.4=   36.0000     (real)
 $_1_ARRAY.9.3=   27.0000     (real)
 $_1_ARRAY.9.2=   18.0000     (real)
 $_1_ARRAY.9.1=   9.00000     (real)
 $_1_ARRAY.8.9=   72.0000     (real)
 $_1_ARRAY.8.8=   64.0000     (real)
 $_1_ARRAY.8.7=   56.0000     (real)
 $_1_ARRAY.8.6=   48.0000     (real)
 $_1_ARRAY.8.5=   40.0000     (real)
 $_1_ARRAY.8.4=   32.0000     (real)
 $_1_ARRAY.8.3=   24.0000     (real)
 $_1_ARRAY.8.2=   16.0000     (real)
 $_1_ARRAY.8.1=   8.00000     (real)
 $_1_ARRAY.7.9=   63.0000     (real)
 $_1_ARRAY.7.8=   56.0000     (real)
 $_1_ARRAY.7.7=   49.0000     (real)
 $_1_ARRAY.7.6=   42.0000     (real)
 $_1_ARRAY.7.5=   35.0000     (real)
 $_1_ARRAY.7.4=   28.0000     (real)
 $_1_ARRAY.7.3=   21.0000     (real)
 $_1_ARRAY.7.2=   14.0000     (real)
 $_1_ARRAY.7.1=   7.00000     (real)
 $_1_ARRAY.6.9=   54.0000     (real)
 $_1_ARRAY.6.8=   48.0000     (real)
 $_1_ARRAY.6.7=   42.0000     (real)
 $_1_ARRAY.6.6=   36.0000     (real)
 $_1_ARRAY.6.5=   30.0000     (real)
 $_1_ARRAY.6.4=   24.0000     (real)
 $_1_ARRAY.6.3=   18.0000     (real)
 $_1_ARRAY.6.2=   12.0000     (real)
 $_1_ARRAY.6.1=   6.00000     (real)
 $_1_ARRAY.5.9=   45.0000     (real)
 $_1_ARRAY.5.8=   40.0000     (real)
 $_1_ARRAY.5.7=   35.0000     (real)
 $_1_ARRAY.5.6=   30.0000     (real)
 $_1_ARRAY.5.5=   25.0000     (real)
 $_1_ARRAY.5.4=   20.0000     (real)
 $_1_ARRAY.5.3=   15.0000     (real)
 $_1_ARRAY.5.2=   10.0000     (real)
 $_1_ARRAY.5.1=   5.00000     (real)
 $_1_ARRAY.4.9=   36.0000     (real)
 $_1_ARRAY.4.8=   32.0000     (real)
 $_1_ARRAY.4.7=   28.0000     (real)
 $_1_ARRAY.4.6=   24.0000     (real)
 $_1_ARRAY.4.5=   20.0000     (real)
 $_1_ARRAY.4.4=   16.0000     (real)
 $_1_ARRAY.4.3=   12.0000     (real)
 $_1_ARRAY.4.2=   8.00000     (real)
 $_1_ARRAY.4.1=   4.00000     (real)
 $_1_ARRAY.3.9=   27.0000     (real)
 $_1_ARRAY.3.8=   24.0000     (real)
 $_1_ARRAY.3.7=   21.0000     (real)
 $_1_ARRAY.3.6=   18.0000     (real)
 $_1_ARRAY.3.5=   15.0000     (real)
 $_1_ARRAY.3.4=   12.0000     (real)
 $_1_ARRAY.3.3=   9.00000     (real)
 $_1_ARRAY.3.2=   6.00000     (real)
 $_1_ARRAY.3.1=   3.00000     (real)
 $_1_ARRAY.2.9=   18.0000     (real)
 $_1_ARRAY.2.8=   16.0000     (real)
 $_1_ARRAY.2.7=   14.0000     (real)
 $_1_ARRAY.2.6=   12.0000     (real)
 $_1_ARRAY.2.5=   10.0000     (real)
 $_1_ARRAY.2.4=   8.00000     (real)
 $_1_ARRAY.2.3=   6.00000     (real)
 $_1_ARRAY.2.2=   4.00000     (real)
 $_1_ARRAY.2.1=   2.00000     (real)
 $_1_ARRAY.1.9=   9.00000     (real)
 $_1_ARRAY.1.8=   8.00000     (real)
 $_1_ARRAY.1.7=   7.00000     (real)
 $_1_ARRAY.1.6=   6.00000     (real)
 $_1_ARRAY.1.5=   5.00000     (real)
 $_1_ARRAY.1.4=   4.00000     (real)
 $_1_ARRAY.1.3=   3.00000     (real)
 $_1_ARRAY.1.2=   2.00000     (real)
 $_1_ARRAY.1.1=   1.00000     (real)
 $_1_Y=   10.0000     (real)
 $_1_FAIL4=   1.25000     (real)
 $_1_FAIL3=  0.100000E+30 (real)
 $_1_FAIL2= (   3.00000    ,   4.00000    )  (complex)
 $_1_FAIL1=  -1.00000     (real)
 $_1_S_S_1_4_3=   3.00000     (real)
 $_1_SYM_1_2=   3.00000     (real)
 $_1_T_4_M=   4.00000     (real)
 $_1_T3=   3.00000     (real)
 $_1_T2=   2.00000     (real)
 $_1_T1=   1.00000     (real)
 $_1_SYM.$_FAIL5.HI=   8.00000     (real)
 $_1_SYM.$FAIL4.HI=   7.00000     (real)
 $_1_SYM.$FAIL3.HI=   6.00000     (real)
 $_1_SYM.$FAIL2.HI=   5.00000     (real)
 $_1_SYM.$FAIL1.HI=   4.00000     (real)
 $_1_SYM.1_2.3=   3.00000     (real)
 $_1_SYM.1.2=   3.00000     (real)
 $_1_SYM.WORKS.HI=   3.00000     (real)
 $_1_SYM.2.HI=   2.00000     (real)
 $_1_TEST3="works" (string) 
 $_1_TEST2=   2.00000     (real)
 $_1_IDX_1=   10.0000     (real)
 $_1_TEST1=   1.00000     (real)
 $_1_RR_1="tt" (string) 
 $_1_FILE="abcd.dat" (string) 
 $_1_JUNK= (   1.00000    ,   2.00000    )  (complex)
 $_1_A_3_3=   6.00000     (real)
 $_1_A_3_2=   5.00000     (real)
 $_1_A_3_1=   4.00000     (real)
 $_1_A_2_3=   5.00000     (real)
 $_1_A_2_2=   4.00000     (real)
 $_1_A_2_1=   3.00000     (real)
 $_1_A_1_3=   4.00000     (real)
 $_1_A_1_2=   3.00000     (real)
 $_1_A_1_1=   2.00000     (real)
 $_1_SUM=   36.0000     (real)
 $_1_X=   10.0000     (real)
 $_1_I=   1.00000     (real)
 $_1_SYMMETRY_OP_1="(X,Y,Z)" (string) 
 $_1_CENTRIC_SPACEGROUP="FALSE" (logical) 
 $_1_SYMMETRY_OP_4="(1/2+X,1/2-Y,-Z)" (string) 
 $_1_SYMMETRY_OP_3="(-X,1/2+Y,1/2-Z)" (string) 
 $_1_SYMMETRY_OP_2="(1/2-X,-Y,1/2+Z)" (string) 
 $_1_ABCD1=   43431.2     (real)
 $_1_ABCD2=   333.400     (real)
 $_1_ABCD= (   1.00000    ,   2.00000    )  (complex)
 $_1_RRR=   1234.00     (real)
 $_1_INDEX_TYPE="ST" (string) 
 $_1_INDEX="B" (string) 
 $_1_4= (   4.00000    ,   5.00000    )  (complex)
 $_1_3=   1.00000     (real)
 $_1_RESULT="FALSE" (logical) 
 $_1_SELECT=   1.00000     (real)
 $_1_ABCE=   62.0000     (real)
 $_1_2A=   10.0300     (real)
 $_1_1A=   123.460     (real)
 $_1_2_TYPE="DP" (string) 
 $_1_A_TYPE="DP" (string) 
 $_1_A=   3.00000     (real)
 $_1_FOR_LINE="$junk " (string) 
 $_1_1_TYPE="DC" (string) 
 $_1_RR=   1.00100     (real)
 $_1_2="ABCDEFGHIJKLMNOPQRSTUVWXYZ" (string) 
 $_1_1=   2.00000     (real)
 $_1_TEST="hell abcd 1" (string) 
 $_1_J=   3.00000     (real)
 $_1_NCS=   1.00000     (real)
 $_1_EFLAG.VEAN="FALSE" (logical) 
 $_1_EFLAG.DANI="FALSE" (logical) 
 $_1_EFLAG.SANI="FALSE" (logical) 
 $_1_EFLAG.RAMA="FALSE" (logical) 
 $_1_EFLAG.ONEB="FALSE" (logical) 
 $_1_EFLAG.PROT="FALSE" (logical) 
 $_1_EFLAG.CARB="FALSE" (logical) 
 $_1_EFLAG.COUP="FALSE" (logical) 
 $_1_EFLAG.ANDB="FALSE" (logical) 
 $_1_EFLAG.DG="FALSE" (logical) 
 $_1_EFLAG.PLAN="FALSE" (logical) 
 $_1_EFLAG.XREF="FALSE" (logical) 
 $_1_EFLAG.NOE="FALSE" (logical) 
 $_1_EFLAG.NCS="FALSE" (logical) 
 $_1_EFLAG.CDIH="FALSE" (logical) 
 $_1_EFLAG.HARM="FALSE" (logical) 
 $_1_EFLAG.PELE="FALSE" (logical) 
 $_1_EFLAG.PVDW="FALSE" (logical) 
 $_1_EFLAG.ELEC="TRUE" (logical) 
 $_1_EFLAG.VDW="TRUE" (logical) 
 $_1_EFLAG.IMPR="TRUE" (logical) 
 $_1_EFLAG.DIHE="TRUE" (logical) 
 $_1_EFLAG.ANGL="TRUE" (logical) 
 $_1_EFLAG.BOND="TRUE" (logical) 
 $_1_EFLAG.GRAD="FALSE" (logical) 
 $_1_EFLAG.TEMP="FALSE" (logical) 
 $_1_EFLAG.ENER="FALSE" (logical) 
 $_1_EFLAG.TOTK="FALSE" (logical) 
 $_1_EFLAG.TOTE="FALSE" (logical) 
 $_1_BIN_NUMBER=   8.00000     (real)
 $_1_SYMMETRY=   4.00000     (real)
 $_1_CSTAR=   1.00000     (real)
 $_1_BSTAR=   1.00000     (real)
 $_1_ASTAR=   1.00000     (real)
 $_1_XRINTR_3_3=   1.00000     (real)
 $_1_XRINTR_3_2=   0.00000     (real)
 $_1_XRINTR_3_1=   0.00000     (real)
 $_1_XRINTR_2_3= -0.349148E-14 (real)
 $_1_XRINTR_2_2=   1.00000     (real)
 $_1_XRINTR_2_1=   0.00000     (real)
 $_1_XRINTR_1_3= -0.349148E-14 (real)
 $_1_XRINTR_1_2= -0.349148E-14 (real)
 $_1_XRINTR_1_1=   1.00000     (real)
 $_1_XRTR_3_3=   1.00000     (real)
 $_1_XRTR_3_2=   0.00000     (real)
 $_1_XRTR_3_1=   0.00000     (real)
 $_1_XRTR_2_3=  0.349148E-14 (real)
 $_1_XRTR_2_2=   1.00000     (real)
 $_1_XRTR_2_1=   0.00000     (real)
 $_1_XRTR_1_3=  0.349148E-14 (real)
 $_1_XRTR_1_2=  0.349148E-14 (real)
 $_1_XRTR_1_1=   1.00000     (real)
 $_1_XRCELL_6=   90.0000     (real)
 $_1_XRCELL_5=   90.0000     (real)
 $_1_XRCELL_4=   90.0000     (real)
 $_1_XRCELL_3=   1.00000     (real)
 $_1_XRCELL_2=   1.00000     (real)
 $_1_XRCELL_1=   1.00000     (real)
 $_1_VOLUME=   1.00000     (real)
 $_1_FP_EPSILON=  0.222045E-15 (real)
 $_1_CNS_PATCH="0" (string) 
 $_1_CNS_VERSION="1.3" (string) 
 $_1_LOG_LEVEL="QUIET" (string) 
 $_1_SYSTEM="x86_64/Linux" (string) 
 $_1_NAME="oeow39" (string) 
 $_1_TIMFAC=  0.488882E-01 (real)
 $_1_PI=   3.14159     (real)
 $_1_KBOLTZ=  0.198719E-02 (real)
 CNSsolve> 
 CNSsolve>! new exist directive 
 CNSsolve> 
 CNSsolve>display   $EXIST%CPU 
  TRUE
 CNSsolve>evaluate ($rrr=1234) 
 EVALUATE: symbol $RRR set to    1234.00     (real)
 CNSsolve>display   $EXIST%RRR 
  TRUE
 CNSsolve>display   $EXIST%rrt 
  FALSE
 CNSsolve> 
 CNSsolve> 
 CNSsolve>! blank directive 
 CNSsolve> 
 CNSsolve>eval ( $somestr = "" ) 
 EVALUATE: symbol $SOMESTR set to "" (string)
 CNSsolve> 
 CNSsolve>if ( $blank%somestr = TRUE ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>display blank (should be TRUE):  $blank%somestr 
blank (should be TRUE):  TRUE
 CNSsolve>else 
 CNSsolve>display not blank (should be FALSE):  $blank%somestr 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>eval ( $somestr = "something" ) 
 EVALUATE: symbol $SOMESTR set to "something" (string)
 CNSsolve> 
 CNSsolve>if ( $blank%somestr = TRUE ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>display blank (should be TRUE):  $blank%somestr 
 CNSsolve>else 
 CNSsolve>display not blank (should be FALSE):  $blank%somestr 
not blank (should be FALSE):  FALSE
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>stop 
          ============================================================
           Maximum dynamic memory allocation:     8248000 bytes
           Maximum dynamic memory overhead:           448 bytes
           Program started at: 16:08:05 on 05-Jul-2018
           Program stopped at: 16:08:05 on 05-Jul-2018
           CPU time used:       0.0423 seconds
          ============================================================
