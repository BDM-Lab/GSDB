          ============================================================
          |                                                          |
          |            Crystallography & NMR System (CNS)            |
          |                         CNSsolve                         |
          |                                                          |
          ============================================================
           Version: 1.3
           Status: General release
          ============================================================
           Written by: A.T.Brunger, P.D.Adams, G.M.Clore, W.L.DeLano,
                       P.Gros, R.W.Grosse-Kunstleve,J.-S.Jiang,J.M.Krahn,
                       J.Kuszewski, M.Nilges, N.S.Pannu, R.J.Read,
                       L.M.Rice, G.F.Schroeder, T.Simonson, G.L.Warren.
           Copyright (c) 1997-2010 Yale University
          ============================================================
           Running on machine: lewis4-r710-login-node223 (x86_64/Linux,64-bit)
                               with 16 threads
           Program started by: oeow39
           Program started at: 16:08:32 on 05-Jul-2018
          ============================================================

 FFT3C: Using FFTPACK4.1

 CNSsolve>remarks  tests various error conditions in the xray feature of CNS 
 CNSsolve> 
 CNSsolve>set abort=off end 
 CNSsolve> 
 CNSsolve>for $sg in ("P1" "C2/c" "Fddd" "I-4c2" "P3(1)21" "P6(3)/mcm" "P2(1)3") loop sg 
 FOR LOOP: symbol SG set to "P1" (string)
 CNSsolve>  {* reset all xray settings 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    reset 
 XRAY: whole xray database erased and reset
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define symmetry 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    @@CNS_XTALLIB:spacegroup.lib (sg=$sg; sgparam = $sgparam) 
 ASSFIL: file spacegroup.lib opened.
 XRAY>! file  libraries/xtal/spacegroup.lib 
 XRAY>! library of symmetry operators for CNS 
 XRAY>! Automatically generated with SgInfo Version 2.00a13 
 XRAY> 
 XRAY>module 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &sg=$sg; 
 MODULE-DECLARATION>  &sgparam=$sgparam; 
 MODULE-DECLARATION>) 
 &_2_SG set to $_1_SG 
 &_2_SGPARAM set to $_1_SGPARAM 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>set echo=off message=off end 
SYMMETRY: found symmetry operators for space group P1 in library
 XRAY> 
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define dummy unit cell dimensions based on space group number 
 CNSsolve>   *} 
 CNSsolve>  if     ($sgparam.sg_number <=   2) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($a = 5.01) 
 EVALUATE: symbol $A set to    5.01000     (real)
 CNSsolve>    evaluate ($b = 6.25) 
 EVALUATE: symbol $B set to    6.25000     (real)
 CNSsolve>    evaluate ($c = 5.47) 
 EVALUATE: symbol $C set to    5.47000     (real)
 CNSsolve>    evaluate ($alpha = 100) 
 EVALUATE: symbol $ALPHA set to    100.000     (real)
 CNSsolve>    evaluate ($beta  =  80) 
 EVALUATE: symbol $BETA set to    80.0000     (real)
 CNSsolve>    evaluate ($gamma = 110) 
 EVALUATE: symbol $GAMMA set to    110.000     (real)
 CNSsolve>  elseif ($sgparam.sg_number <=  15) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <=  74) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 142) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 194) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma = 120) 
 CNSsolve>  else 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = $a) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  xray 
 XRAY>    a=$a b=$b c=$c alpha=$alpha beta=$beta gamma=$gamma 
 XRAY> 
 XRAY>    generate 10. 2. 
 XGENER: generating reflections to produce a full set
         for the specified resolution range.
 XGENE2:       42 new reflections have been generated.
 XRAY> 
 XRAY>    anomalous=true 
 XPARSE: expanding data set (h,k,l)->{(h,k,l),(-h,-k,-l)}
 XEXPFR2:       42 new reflections have been generated.
 XRAY> 
 XRAY>    gamma=70 
 XRAY> 
 XRAY>    display $sg 
P1
 XRAY>    anomalous=false 
 XPARSE: data will be reduced to hemisphere.          Anomalous signal will be lost.
 XAVEFRIED: Friedel mates of all recipr. space obj. will be averaged.
    (also operates on phases and HL coefficients)
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XREDU2: multiple instances found for some reflections.
 XREDU2: deleting redundant reflections.
 XREDU2:       42 reflections have been deleted.
 XREDU2: sorting all reflections.
 XRAY>  end 
 CNSsolve>end loop sg 
 CNSsolve>for $sg in ("P1" "C2/c" "Fddd" "I-4c2" "P3(1)21" "P6(3)/mcm" "P2(1)3") loop sg 
 FOR LOOP: symbol SG set to "C2/c" (string)
 CNSsolve>  {* reset all xray settings 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    reset 
 XRAY: whole xray database erased and reset
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define symmetry 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    @@CNS_XTALLIB:spacegroup.lib (sg=$sg; sgparam = $sgparam) 
 ASSFIL: file spacegroup.lib opened.
 XRAY>! file  libraries/xtal/spacegroup.lib 
 XRAY>! library of symmetry operators for CNS 
 XRAY>! Automatically generated with SgInfo Version 2.00a13 
 XRAY> 
 XRAY>module 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &sg=$sg; 
 MODULE-DECLARATION>  &sgparam=$sgparam; 
 MODULE-DECLARATION>) 
 &_2_SG set to $_1_SG 
 &_2_SGPARAM set to $_1_SGPARAM 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>set echo=off message=off end 
SYMMETRY: found symmetry operators for space group C2/c in library
 XRAY> 
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define dummy unit cell dimensions based on space group number 
 CNSsolve>   *} 
 CNSsolve>  if     ($sgparam.sg_number <=   2) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha = 100) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma = 110) 
 CNSsolve>  elseif ($sgparam.sg_number <=  15) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($a = 5.01) 
 EVALUATE: symbol $A set to    5.01000     (real)
 CNSsolve>    evaluate ($b = 6.25) 
 EVALUATE: symbol $B set to    6.25000     (real)
 CNSsolve>    evaluate ($c = 5.47) 
 EVALUATE: symbol $C set to    5.47000     (real)
 CNSsolve>    evaluate ($alpha =  90) 
 EVALUATE: symbol $ALPHA set to    90.0000     (real)
 CNSsolve>    evaluate ($beta  =  80) 
 EVALUATE: symbol $BETA set to    80.0000     (real)
 CNSsolve>    evaluate ($gamma =  90) 
 EVALUATE: symbol $GAMMA set to    90.0000     (real)
 CNSsolve>  elseif ($sgparam.sg_number <=  74) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 142) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 194) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma = 120) 
 CNSsolve>  else 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = $a) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  xray 
 XRAY>    a=$a b=$b c=$c alpha=$alpha beta=$beta gamma=$gamma 
 XRAY> 
 XRAY>    generate 10. 2. 
 XGENER: generating reflections to produce a full set
         for the specified resolution range.
 XGENE2:       11 new reflections have been generated.
 XRAY> 
 XRAY>    anomalous=true 
 XPARSE: expanding data set (h,k,l)->{(h,k,l),(-h,-k,-l)}
 XEXPFR2:        0 new reflections have been generated.
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XRAY> 
 XRAY>    gamma=70 
 XRAY> 
 XRAY>    display $sg 
C2/c
 XRAY>    anomalous=false 
 XPARSE: data will be reduced to hemisphere.          Anomalous signal will be lost.
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XAVEFRIED: Friedel mates of all recipr. space obj. will be averaged.
    (also operates on phases and HL coefficients)
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XRAY>  end 
 CNSsolve>end loop sg 
 CNSsolve>for $sg in ("P1" "C2/c" "Fddd" "I-4c2" "P3(1)21" "P6(3)/mcm" "P2(1)3") loop sg 
 FOR LOOP: symbol SG set to "Fddd" (string)
 CNSsolve>  {* reset all xray settings 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    reset 
 XRAY: whole xray database erased and reset
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define symmetry 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    @@CNS_XTALLIB:spacegroup.lib (sg=$sg; sgparam = $sgparam) 
 ASSFIL: file spacegroup.lib opened.
 XRAY>! file  libraries/xtal/spacegroup.lib 
 XRAY>! library of symmetry operators for CNS 
 XRAY>! Automatically generated with SgInfo Version 2.00a13 
 XRAY> 
 XRAY>module 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &sg=$sg; 
 MODULE-DECLARATION>  &sgparam=$sgparam; 
 MODULE-DECLARATION>) 
 &_2_SG set to $_1_SG 
 &_2_SGPARAM set to $_1_SGPARAM 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>set echo=off message=off end 
SYMMETRY: found symmetry operators for space group Fddd in library
 XRAY> 
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define dummy unit cell dimensions based on space group number 
 CNSsolve>   *} 
 CNSsolve>  if     ($sgparam.sg_number <=   2) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha = 100) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma = 110) 
 CNSsolve>  elseif ($sgparam.sg_number <=  15) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <=  74) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($a = 5.01) 
 EVALUATE: symbol $A set to    5.01000     (real)
 CNSsolve>    evaluate ($b = 6.25) 
 EVALUATE: symbol $B set to    6.25000     (real)
 CNSsolve>    evaluate ($c = 5.47) 
 EVALUATE: symbol $C set to    5.47000     (real)
 CNSsolve>    evaluate ($alpha =  90) 
 EVALUATE: symbol $ALPHA set to    90.0000     (real)
 CNSsolve>    evaluate ($beta  =  90) 
 EVALUATE: symbol $BETA set to    90.0000     (real)
 CNSsolve>    evaluate ($gamma =  90) 
 EVALUATE: symbol $GAMMA set to    90.0000     (real)
 CNSsolve>  elseif ($sgparam.sg_number <= 142) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 194) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma = 120) 
 CNSsolve>  else 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = $a) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  xray 
 XRAY>    a=$a b=$b c=$c alpha=$alpha beta=$beta gamma=$gamma 
 XRAY> 
 XRAY>    generate 10. 2. 
 XGENER: generating reflections to produce a full set
         for the specified resolution range.
 XGENE2:        2 new reflections have been generated.
 XRAY> 
 XRAY>    anomalous=true 
 XPARSE: expanding data set (h,k,l)->{(h,k,l),(-h,-k,-l)}
 XEXPFR2:        0 new reflections have been generated.
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XRAY> 
 XRAY>    gamma=70 
 XRAY> 
 XRAY>    display $sg 
Fddd
 XRAY>    anomalous=false 
 XPARSE: data will be reduced to hemisphere.          Anomalous signal will be lost.
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XAVEFRIED: Friedel mates of all recipr. space obj. will be averaged.
    (also operates on phases and HL coefficients)
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XRAY>  end 
 CNSsolve>end loop sg 
 CNSsolve>for $sg in ("P1" "C2/c" "Fddd" "I-4c2" "P3(1)21" "P6(3)/mcm" "P2(1)3") loop sg 
 FOR LOOP: symbol SG set to "I-4c2" (string)
 CNSsolve>  {* reset all xray settings 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    reset 
 XRAY: whole xray database erased and reset
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define symmetry 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    @@CNS_XTALLIB:spacegroup.lib (sg=$sg; sgparam = $sgparam) 
 ASSFIL: file spacegroup.lib opened.
 XRAY>! file  libraries/xtal/spacegroup.lib 
 XRAY>! library of symmetry operators for CNS 
 XRAY>! Automatically generated with SgInfo Version 2.00a13 
 XRAY> 
 XRAY>module 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &sg=$sg; 
 MODULE-DECLARATION>  &sgparam=$sgparam; 
 MODULE-DECLARATION>) 
 &_2_SG set to $_1_SG 
 &_2_SGPARAM set to $_1_SGPARAM 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>set echo=off message=off end 
SYMMETRY: found symmetry operators for space group I-4c2 in library
 XRAY> 
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define dummy unit cell dimensions based on space group number 
 CNSsolve>   *} 
 CNSsolve>  if     ($sgparam.sg_number <=   2) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha = 100) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma = 110) 
 CNSsolve>  elseif ($sgparam.sg_number <=  15) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <=  74) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 142) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($a = 5.01) 
 EVALUATE: symbol $A set to    5.01000     (real)
 CNSsolve>    evaluate ($b = $a) 
 EVALUATE: symbol $B set to    5.01000     (real)
 CNSsolve>    evaluate ($c = 5.47) 
 EVALUATE: symbol $C set to    5.47000     (real)
 CNSsolve>    evaluate ($alpha =  90) 
 EVALUATE: symbol $ALPHA set to    90.0000     (real)
 CNSsolve>    evaluate ($beta  =  90) 
 EVALUATE: symbol $BETA set to    90.0000     (real)
 CNSsolve>    evaluate ($gamma =  90) 
 EVALUATE: symbol $GAMMA set to    90.0000     (real)
 CNSsolve>  elseif ($sgparam.sg_number <= 194) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma = 120) 
 CNSsolve>  else 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = $a) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  xray 
 XRAY>    a=$a b=$b c=$c alpha=$alpha beta=$beta gamma=$gamma 
 XRAY> 
 XRAY>    generate 10. 2. 
 XGENER: generating reflections to produce a full set
         for the specified resolution range.
 XGENE2:        5 new reflections have been generated.
 XRAY> 
 XRAY>    anomalous=true 
 XPARSE: expanding data set (h,k,l)->{(h,k,l),(-h,-k,-l)}
 XEXPFR2:        1 new reflections have been generated.
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XRAY> 
 XRAY>    gamma=70 
 XRAY> 
 XRAY>    display $sg 
I-4c2
 XRAY>    anomalous=false 
 XPARSE: data will be reduced to hemisphere.          Anomalous signal will be lost.
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XAVEFRIED: Friedel mates of all recipr. space obj. will be averaged.
    (also operates on phases and HL coefficients)
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XREDU2: multiple instances found for some reflections.
 XREDU2: deleting redundant reflections.
 XREDU2:        1 reflections have been deleted.
 XREDU2: sorting all reflections.
 XRAY>  end 
 CNSsolve>end loop sg 
 CNSsolve>for $sg in ("P1" "C2/c" "Fddd" "I-4c2" "P3(1)21" "P6(3)/mcm" "P2(1)3") loop sg 
 FOR LOOP: symbol SG set to "P3(1)21" (string)
 CNSsolve>  {* reset all xray settings 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    reset 
 XRAY: whole xray database erased and reset
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define symmetry 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    @@CNS_XTALLIB:spacegroup.lib (sg=$sg; sgparam = $sgparam) 
 ASSFIL: file spacegroup.lib opened.
 XRAY>! file  libraries/xtal/spacegroup.lib 
 XRAY>! library of symmetry operators for CNS 
 XRAY>! Automatically generated with SgInfo Version 2.00a13 
 XRAY> 
 XRAY>module 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &sg=$sg; 
 MODULE-DECLARATION>  &sgparam=$sgparam; 
 MODULE-DECLARATION>) 
 &_2_SG set to $_1_SG 
 &_2_SGPARAM set to $_1_SGPARAM 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>set echo=off message=off end 
SYMMETRY: found symmetry operators for space group P3(1)21 in library
 XRAY> 
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define dummy unit cell dimensions based on space group number 
 CNSsolve>   *} 
 CNSsolve>  if     ($sgparam.sg_number <=   2) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha = 100) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma = 110) 
 CNSsolve>  elseif ($sgparam.sg_number <=  15) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <=  74) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 142) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 194) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($a = 5.01) 
 EVALUATE: symbol $A set to    5.01000     (real)
 CNSsolve>    evaluate ($b = $a) 
 EVALUATE: symbol $B set to    5.01000     (real)
 CNSsolve>    evaluate ($c = 5.47) 
 EVALUATE: symbol $C set to    5.47000     (real)
 CNSsolve>    evaluate ($alpha =  90) 
 EVALUATE: symbol $ALPHA set to    90.0000     (real)
 CNSsolve>    evaluate ($beta  =  90) 
 EVALUATE: symbol $BETA set to    90.0000     (real)
 CNSsolve>    evaluate ($gamma = 120) 
 EVALUATE: symbol $GAMMA set to    120.000     (real)
 CNSsolve>  else 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = $a) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  xray 
 XRAY>    a=$a b=$b c=$c alpha=$alpha beta=$beta gamma=$gamma 
 XRAY> 
 XRAY>    generate 10. 2. 
 XGENER: generating reflections to produce a full set
         for the specified resolution range.
 XGENE2:       10 new reflections have been generated.
 XRAY> 
 XRAY>    anomalous=true 
 XPARSE: expanding data set (h,k,l)->{(h,k,l),(-h,-k,-l)}
 XEXPFR2:        2 new reflections have been generated.
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XRAY> 
 XRAY>    gamma=70 
 XRAY> 
 XRAY>    display $sg 
P3(1)21
 XRAY>    anomalous=false 
 XPARSE: data will be reduced to hemisphere.          Anomalous signal will be lost.
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XAVEFRIED: Friedel mates of all recipr. space obj. will be averaged.
    (also operates on phases and HL coefficients)
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XREDU2: multiple instances found for some reflections.
 XREDU2: deleting redundant reflections.
 XREDU2:        2 reflections have been deleted.
 XREDU2: sorting all reflections.
 XRAY>  end 
 CNSsolve>end loop sg 
 CNSsolve>for $sg in ("P1" "C2/c" "Fddd" "I-4c2" "P3(1)21" "P6(3)/mcm" "P2(1)3") loop sg 
 FOR LOOP: symbol SG set to "P6(3)/mcm" (string)
 CNSsolve>  {* reset all xray settings 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    reset 
 XRAY: whole xray database erased and reset
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define symmetry 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    @@CNS_XTALLIB:spacegroup.lib (sg=$sg; sgparam = $sgparam) 
 ASSFIL: file spacegroup.lib opened.
 XRAY>! file  libraries/xtal/spacegroup.lib 
 XRAY>! library of symmetry operators for CNS 
 XRAY>! Automatically generated with SgInfo Version 2.00a13 
 XRAY> 
 XRAY>module 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &sg=$sg; 
 MODULE-DECLARATION>  &sgparam=$sgparam; 
 MODULE-DECLARATION>) 
 &_2_SG set to $_1_SG 
 &_2_SGPARAM set to $_1_SGPARAM 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>set echo=off message=off end 
SYMMETRY: found symmetry operators for space group P6(3)/mcm in library
 XRAY> 
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define dummy unit cell dimensions based on space group number 
 CNSsolve>   *} 
 CNSsolve>  if     ($sgparam.sg_number <=   2) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha = 100) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma = 110) 
 CNSsolve>  elseif ($sgparam.sg_number <=  15) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <=  74) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 142) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 194) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($a = 5.01) 
 EVALUATE: symbol $A set to    5.01000     (real)
 CNSsolve>    evaluate ($b = $a) 
 EVALUATE: symbol $B set to    5.01000     (real)
 CNSsolve>    evaluate ($c = 5.47) 
 EVALUATE: symbol $C set to    5.47000     (real)
 CNSsolve>    evaluate ($alpha =  90) 
 EVALUATE: symbol $ALPHA set to    90.0000     (real)
 CNSsolve>    evaluate ($beta  =  90) 
 EVALUATE: symbol $BETA set to    90.0000     (real)
 CNSsolve>    evaluate ($gamma = 120) 
 EVALUATE: symbol $GAMMA set to    120.000     (real)
 CNSsolve>  else 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = $a) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  xray 
 XRAY>    a=$a b=$b c=$c alpha=$alpha beta=$beta gamma=$gamma 
 XRAY> 
 XRAY>    generate 10. 2. 
 XGENER: generating reflections to produce a full set
         for the specified resolution range.
 XGENE2:        6 new reflections have been generated.
 XRAY> 
 XRAY>    anomalous=true 
 XPARSE: expanding data set (h,k,l)->{(h,k,l),(-h,-k,-l)}
 XEXPFR2:        0 new reflections have been generated.
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XRAY> 
 XRAY>    gamma=70 
 XRAY> 
 XRAY>    display $sg 
P6(3)/mcm
 XRAY>    anomalous=false 
 XPARSE: data will be reduced to hemisphere.          Anomalous signal will be lost.
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XAVEFRIED: Friedel mates of all recipr. space obj. will be averaged.
    (also operates on phases and HL coefficients)
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XRAY>  end 
 CNSsolve>end loop sg 
 CNSsolve>for $sg in ("P1" "C2/c" "Fddd" "I-4c2" "P3(1)21" "P6(3)/mcm" "P2(1)3") loop sg 
 FOR LOOP: symbol SG set to "P2(1)3" (string)
 CNSsolve>  {* reset all xray settings 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    reset 
 XRAY: whole xray database erased and reset
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define symmetry 
 CNSsolve>   *} 
 CNSsolve>  xray 
 XRAY>    @@CNS_XTALLIB:spacegroup.lib (sg=$sg; sgparam = $sgparam) 
 ASSFIL: file spacegroup.lib opened.
 XRAY>! file  libraries/xtal/spacegroup.lib 
 XRAY>! library of symmetry operators for CNS 
 XRAY>! Automatically generated with SgInfo Version 2.00a13 
 XRAY> 
 XRAY>module 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &sg=$sg; 
 MODULE-DECLARATION>  &sgparam=$sgparam; 
 MODULE-DECLARATION>) 
 &_2_SG set to $_1_SG 
 &_2_SGPARAM set to $_1_SGPARAM 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>set echo=off message=off end 
SYMMETRY: found symmetry operators for space group P2(1)3 in library
 XRAY> 
 XRAY>  end 
 CNSsolve> 
 CNSsolve>  {* define dummy unit cell dimensions based on space group number 
 CNSsolve>   *} 
 CNSsolve>  if     ($sgparam.sg_number <=   2) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha = 100) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma = 110) 
 CNSsolve>  elseif ($sgparam.sg_number <=  15) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <=  74) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 142) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 194) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma = 120) 
 CNSsolve>  else 
 CNSsolve>    evaluate ($a = 5.01) 
 EVALUATE: symbol $A set to    5.01000     (real)
 CNSsolve>    evaluate ($b = $a) 
 EVALUATE: symbol $B set to    5.01000     (real)
 CNSsolve>    evaluate ($c = $a) 
 EVALUATE: symbol $C set to    5.01000     (real)
 CNSsolve>    evaluate ($alpha =  90) 
 EVALUATE: symbol $ALPHA set to    90.0000     (real)
 CNSsolve>    evaluate ($beta  =  90) 
 EVALUATE: symbol $BETA set to    90.0000     (real)
 CNSsolve>    evaluate ($gamma =  90) 
 EVALUATE: symbol $GAMMA set to    90.0000     (real)
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  xray 
 XRAY>    a=$a b=$b c=$c alpha=$alpha beta=$beta gamma=$gamma 
 XRAY> 
 XRAY>    generate 10. 2. 
 XGENER: generating reflections to produce a full set
         for the specified resolution range.
 XGENE2:        6 new reflections have been generated.
 XRAY> 
 XRAY>    anomalous=true 
 XPARSE: expanding data set (h,k,l)->{(h,k,l),(-h,-k,-l)}
 XEXPFR2:        2 new reflections have been generated.
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XRAY> 
 XRAY>    gamma=70 
 XRAY> 
 XRAY>    display $sg 
P2(1)3
 XRAY>    anomalous=false 
 XPARSE: data will be reduced to hemisphere.          Anomalous signal will be lost.
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XAVEFRIED: Friedel mates of all recipr. space obj. will be averaged.
    (also operates on phases and HL coefficients)
 %XSYMCEL-ERR: check spacegroup and  cell dimensions.
 %XSYMCEL error encountered: Spacegroup is incompatible with cell dimensions.
   (CNS is in mode: SET ABORT=OFF END)
 XREDUC: some reflection(s) converted to CNS standard asymm. unit.
 XREDU2: multiple instances found for some reflections.
 XREDU2: deleting redundant reflections.
 XREDU2:        2 reflections have been deleted.
 XREDU2: sorting all reflections.
 XRAY>  end 
 CNSsolve>end loop sg 
 CNSsolve>for $sg in ("P1" "C2/c" "Fddd" "I-4c2" "P3(1)21" "P6(3)/mcm" "P2(1)3") loop sg 
 CNSsolve>  {* reset all xray settings 
 CNSsolve>   *} 
 CNSsolve>  xray 
 CNSsolve>    reset 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  {* define symmetry 
 CNSsolve>   *} 
 CNSsolve>  xray 
 CNSsolve>    @@CNS_XTALLIB:spacegroup.lib (sg=$sg; sgparam = $sgparam) 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  {* define dummy unit cell dimensions based on space group number 
 CNSsolve>   *} 
 CNSsolve>  if     ($sgparam.sg_number <=   2) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha = 100) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma = 110) 
 CNSsolve>  elseif ($sgparam.sg_number <=  15) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  80) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <=  74) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = 6.25) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 142) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  elseif ($sgparam.sg_number <= 194) then 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = 5.47) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma = 120) 
 CNSsolve>  else 
 CNSsolve>    evaluate ($a = 5.01) 
 CNSsolve>    evaluate ($b = $a) 
 CNSsolve>    evaluate ($c = $a) 
 CNSsolve>    evaluate ($alpha =  90) 
 CNSsolve>    evaluate ($beta  =  90) 
 CNSsolve>    evaluate ($gamma =  90) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  xray 
 CNSsolve>    a=$a b=$b c=$c alpha=$alpha beta=$beta gamma=$gamma 
 CNSsolve> 
 CNSsolve>    generate 10. 2. 
 CNSsolve> 
 CNSsolve>    anomalous=true 
 CNSsolve> 
 CNSsolve>    gamma=70 
 CNSsolve> 
 CNSsolve>    display $sg 
 CNSsolve>    anomalous=false 
 CNSsolve>  end 
 CNSsolve>end loop sg 
 CNSsolve> 
 CNSsolve>stop 
          ============================================================
           Maximum dynamic memory allocation:     8201488 bytes
           Maximum dynamic memory overhead:           400 bytes
           Program started at: 16:08:32 on 05-Jul-2018
           Program stopped at: 16:08:32 on 05-Jul-2018
           CPU time used:       0.2466 seconds
          ============================================================
