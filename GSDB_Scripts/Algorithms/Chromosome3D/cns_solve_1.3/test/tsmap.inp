remarks  TSMAP.INP
remarks  tests fmap, tsmap and psearch commands in XRAY
remarks  By R.W.Grosse-Kunstleve

{* Generate a two-atom dummy structure
 *}
topology
  residue SI
    atom SI mass=14 charge=0 {chemical}type="SI+4" end
  end
  residue O
    atom O  mass=8  charge=0 {chemical}type="O-1"  end
  end
end

segment
  name = QZ
  molecule {res}name=SI number=1 end
  molecule {res}name=O  number=1 end
end

do (name="SI1") (resid=1)
do (name="O1")  (resid=2)

eval($iloop=0)
eval($fprec=single)
eval($lessdir=false)
eval($lessfft=true)
eval($fcx=fcalcx)

{* loop over some space groups
     anomalous = true or false
       partial = true or false
         special = true or false
 *}
for $sg in ("P1" "C2/c" "Fddd" "I-4c2" "P3(1)" "P6(3)/mcm" "P2(1)3") loop sg
  if ($fcx=fcalcx) then
    eval($fcx=fcalc)
  else
    eval($fcx=fcalcx)
  end if
  for $anomalous in (false true) loop anomalous
    do (x=0.499   ) (name=SI1)
    do (y=0.000   ) (name=SI1)
    do (z=0.333333) (name=SI1)
    do (q=1.0     ) (name=SI1)
    do (b=2.0     ) (name=SI1)

    do (x=0.427   ) (name=O1)
    do (y=0.187   ) (name=O1)
    do (z=0.128   ) (name=O1)
    do (q=1.0     ) (name=O1)
    do (b=4.0     ) (name=O1)

    {* reset all xray settings
     *}
    xray
      reset
    end

    {* define some general xray settings
     *}
    xray
      bins=1

      if ($fcx=fcalc) then
        declare name=fobs  domain=reciprocal type=complex end
      else
        declare name=fobs  domain=reciprocal type=real    end
      end if

      declare name=fpart domain=reciprocal type=complex end
      declare name=fcalc domain=reciprocal type=complex end

      target=(F2F2[mult=true](amplitude(fobs),fcalc+fpart))
      dtarget=(dF2F2[mult=true](amplitude(fobs),fcalc+fpart))
      monitor=(corr[overall,mult=true]( (amplitude(fobs))^2,
                                        (amplitude(fcalc+fpart))^2 ))
      method=direct

      evaluate ($lr=10000.)
      evaluate ($hr=1)
      binresolution $lr $hr
      mapresolution $hr
      tselection=( $hr <= d <= $lr )

    end

    {* define scattering factors and symmetry
     *}
    xray
      @@CNS_XRAYLIB:scatter.lib
      @@CNS_XTALLIB:spacegroup.lib (sg=$sg; sgparam = $sgparam )
    end

    {* define dummy unit cell dimensions based on space group number
     *}

    if ($sgparam.sg_number <=   2) then
      evaluate ($a = 5.01)
      evaluate ($b = 6.25)
      evaluate ($c = 5.47)
      evaluate ($alpha = 100)
      evaluate ($beta  =  80)
      evaluate ($gamma = 110)
    elseif ($sgparam.sg_number <=  15) then
      evaluate ($a = 5.01)
      evaluate ($b = 6.25)
      evaluate ($c = 5.47)
      evaluate ($alpha =  90)
      evaluate ($beta  =  80)
      evaluate ($gamma =  90)
    elseif ($sgparam.sg_number <=  74) then
      evaluate ($a = 5.01)
      evaluate ($b = 6.25)
      evaluate ($c = 5.47)
      evaluate ($alpha =  90)
      evaluate ($beta  =  90)
      evaluate ($gamma =  90)
    elseif ($sgparam.sg_number <= 142) then
      evaluate ($a = 5.01)
      evaluate ($b = $a)
      evaluate ($c = 5.47)
      evaluate ($alpha =  90)
      evaluate ($beta  =  90)
      evaluate ($gamma =  90)
    elseif ($sgparam.sg_number <= 194) then
      evaluate ($a = 5.01)
      evaluate ($b = $a)
      evaluate ($c = 5.47)
      evaluate ($alpha =  90)
      evaluate ($beta  =  90)
      evaluate ($gamma = 120)
    else
      evaluate ($a = 5.01)
      evaluate ($b = $a)
      evaluate ($c = $a)
      evaluate ($alpha =  90)
      evaluate ($beta  =  90)
      evaluate ($gamma =  90)
    end if

    xray
      a=$a b=$b c=$c alpha=$alpha beta=$beta gamma=$gamma
    end

    coordinates orthogonalize end

    {* Make sure there is a test for an odd number grid points
     *}
    if ($sgparam.SymGrid_x = 3) then eval($sgparam.SymGrid_x=27) end if
    if ($sgparam.SymGrid_y = 3) then eval($sgparam.SymGrid_y=27) end if
    if ($sgparam.SymGrid_z = 3) then eval($sgparam.SymGrid_z=27) end if

    xray
      {* set space-group dependent restrictions for map-grid dimensions
       *}
      fft
        grid=0.5
        xgridfactor=$sgparam.SymGrid_x
        ygridfactor=$sgparam.SymGrid_y
        zgridfactor=$sgparam.SymGrid_z
      end

      {* generate reflections
       *}
      anomalous = $anomalous
      generate 100000. 1.0

      {* compute dummy "fobs"
       *}
      do (fobs=0) (all)
      predict
         mode=reciprocal
         to=fcalc
         selection=( $hr <= d <= $lr )
         atomselection=( all )
      end
      do (fobs=amplitude(fcalc)) ($hr <= d <= $lr)

      {* compute dummy fpart
       *}
      predict
         mode=reciprocal
         to=fpart
         selection=( $hr <= d <= $lr )
         atomselection=( name O1 )
      end

    end

    {* move atom for translation search to origin
     *}
    do (x=0) (name=SI1)
    do (y=0) (name=SI1)
    do (z=0) (name=SI1)

    xray
      {* compute fcalc in P1
       *}
      expand

      predict
         mode=reciprocal
         to=fcalc
         selection=( $hr <= d <= $lr )
         atomselection=( name SI1 )
      end

      {* declare maps for both direct and FFT translation search
       *}
      declare name=dtsmap domain=real end
      declare name=ftsmap domain=real end
      declare name=fcalcx domain=reciprocal type=complex end

      {* define symmetry for flagmap, translation search and peak search
       *}
      fmap
        @@CNS_XTALLIB:spacegroup.lib (sg=$sg; &sgparam = $sgparam )
        if ($sgparam.ssVM_1 # "VOID") then ssVM = $sgparam.ssVM_1 end if
        if ($sgparam.ssVM_2 # "VOID") then ssVM = $sgparam.ssVM_2 end if
        if ($sgparam.ssVM_3 # "VOID") then ssVM = $sgparam.ssVM_3 end if
        if ($sgparam.GenK2L # "VOID") then Addl = $sgparam.GenK2L end if
        ?
        Symmetry ?
        AddlGenerators ?
      end
    end

    set message=all end

    for $partial in (false true) loop partial
      for $special in (false true) loop special
        xray
          {* Build flagmap
           *}
          fmap
            UseSym = true
            if ($partial = true) then
              Use_ss  = false
              UseAddl = false
            else
              Use_ss  = true
              UseAddl = true
            end if
            Action=Build
          end

          {* switch FPREcision and LESSmemory
           *}
          eval($ilmod = mod($iloop, 3))
          if ($ilmod < 0.001) then
            if ($fprec=single) then
              eval($fprec=double)
            else
              eval($fprec=single)
            end if
          end if

          eval($ilmod = mod($iloop, 5))
          if ($ilmod < 0.001) then
            if ($lessfft=true) then
              eval($lessdir=true)
              eval($lessfft=false)
            else
              eval($lessdir=false)
              eval($lessfft=true)
            end if
          end if

          {* direct translation search
           *}
          if ($partial=true) then
            target=(F2F2[mult=true](amplitude(fobs),$$fcx+fpart))
            dtarget=(dF2F2[mult=true](amplitude(fobs),$$fcx+fpart))
            monitor=(corr[overall,mult=true]( (amplitude(fobs))^2,
                                              (amplitude($$fcx+fpart))^2 ))
          else
            target=(F2F2[mult=true](amplitude(fobs),$$fcx))
            dtarget=(dF2F2[mult=true](amplitude(fobs),$$fcx))
            monitor=(corr[overall,mult=true]( (amplitude(fobs))^2,
                                              (amplitude($$fcx))^2 ))
          end if
          search tsmap
            FobsFrom=fobs
            P1FcalcFrom=fcalc
            TrFcalcFrom=$fcx
            if ($partial = true) then FpartFrom=fpart end if
            SpecialPositions = $special
            To=dtsmap
            Method=Direct
            LESSmemory=$lessdir
            ?
          end

          {* FFT translation search
           *}
          search tsmap
            FobsFrom=fobs
            P1FcalcFrom=fcalc
            TrFcalcFrom=$fcx
            if ($partial = true) then FpartFrom=fpart end if
            SpecialPositions = $special
            To=ftsmap
            Method=FFT
            FPREcision=$fprec
            LESSmemory=$lessfft
            ?
          end

          {* make sure the maps generated by the direct and FFT translation
             searches are equal within floating point precision
           *}
          show max (abs(dtsmap-ftsmap)) (all)
          if ($result > 0.02) then
            display == sg = $sg
            display == anomalous = $anomalous
            display == partial = $partial
            display == special = $special
            display == fprec = $fprec
            display == lessdir = $lessdir
            display == lessfft = $lessfft
            display == fcx = $fcx
            abort
          end if

          {* list the 10 non-redundant highest peaks
           *}
          psearch
            From=ftsmap
            level = 0
            nList = 10
            Fractional = true
          end

          eval($iloop = $iloop + 1)
        end
      end loop special {* keep going ... *}
    end loop partial

    set message=on end

  end loop anomalous
end loop sg

stop
