#!/bin/sh 
#
eval "exec perl -x $0 $*"
#
#!perl
#
# Generate HTML version of syntax manual (from help library)
# 
# Written by: Paul Adams
#
# copyright Yale University
#

check_version();

$BGCOLOR="#8EBF8E";
$COMMENTCOLOR="#800000";
$REFCOLOR="#0000FF";

@other_files = ("global",
		"data-types", 
		"atom-expression", 
		"atom-object", 
		"atom-selection", 
		"xray-expression", 
		"xray-object",
		"xray-selection");

( $source, $dest ) = get_args();

@help_files = get_dir_list($source);

%index = ();

foreach $file ( @help_files ) {

    $slot=0; $depthold=0;
    @deptharray=(); @typearray=();
    @definitions=(); @itemarray=();

    print STDERR "processing file: ${file}\n";

    open ( FILE, "< $source/${file}" );
    open ( STDOUT, "> $dest/${file}.html" );

    while ( $line = <FILE> ) {

	($type,$depth,@item)=get_item($line,$depthold);

	if ( $depth >= 0 ) {
	    $deptharray[$slot] = $depth;
	    if ( $type eq definition ) {
		$depth++;
		$depthold=$depth;
	    }
	}
	else {
	    $deptharray[$slot] = $depthold
	    }
	$typearray[$slot] = $type;
	$itemarray[$slot] = [ @item ];

	if ( $type eq definition ) {
	    push (@definitions,$item[0]);
	}

	$slot++;
    }
    
    $count=0;

    print "<HTML>\n";
    print "<BODY BGCOLOR=$BGCOLOR>\n";
    print "<TT>\n";
    
    while ( $count <= $slot ) {

	$type = $typearray[$count];
	$depth = $deptharray[$count];
	@item = ();
	push(@item,@{$itemarray[$count]});

	indent($depth);

	if ( $type eq definition ) {
	    print "<A NAME=\"$item[0]\"><B>&lt;$item[0]&gt; :== </B></A>";
	    for ( $i=1; $i<=$#item; $i++ ) {
		print add_link(urlencode($item[$i]));
	    }
	}
	elsif ( $type eq comment ) {
	    if ( $typearray[$count+1] eq comment ) {
		@next_item = ();
		push(@next_item,@{$itemarray[$count+1]});
		if ( $next_item[0] =~ /^\s*====+====/ ) {
		    print "<U>";
		    print urlencode(triml(@item));
		    print "</U>";
		    $count++;
		}
		else {
		    print "<FONT COLOR=$COMMENTCOLOR><I>";
		    print urlencode(@item);
		    print "</FONT></I>";
		}
	    }
	    else {
		print "<FONT COLOR=$COMMENTCOLOR><I>";
		print urlencode(@item);
		print "</FONT></I>";
	    }
	}
	elsif ( $type eq variable ) {
	    print add_link(index_urlencode(triml(@item)));
	    if ( $typearray[$count+1] eq variable ) {
		$done=0;
		while ( ! $done ) {
		    $count++;
		    $type = $typearray[$count];
		    @item = ();
		    push(@item,@{$itemarray[$count]});
		    print "<BR>";
		    print add_link(index_urlencode(@item));
		    $done=($typearray[$count+1] ne variable);
		}
	    }
	    if ( $typearray[$count+1] eq comment ) {
		$done=0;
		while ( ! $done ) {
		    $count++;
		    $type = $typearray[$count];
		    @item = ();
		    push(@item,@{$itemarray[$count]});
		    print "<FONT COLOR=$COMMENTCOLOR><BR><I>";
		    print urlencode(@item);
		    print "</FONT></I>";
		    $done=($typearray[$count+1] ne comment);
		}
	    }
	}
	elsif ( $type eq variable_comment ) {
	    print add_link(index_urlencode($item[0]));
	    print "&nbsp;<FONT COLOR=$COMMENTCOLOR><I>";
	    print urlencode($item[1]);
	    print "</FONT></I>";
	}
	elsif ( $type eq blank ) {
	    print "<BR>";
	}

	outdent($depth);

	$count++;

    }

    print "</TT>\n";
    print "<TABLE><TR><TD HEIGHT=\"600\"></TD></TR></TABLE>\n";
    print "</BODY>\n";
    print "</HTML>\n";

    close FILE;
}

print STDERR "generating index\n";

foreach $letter ( ( 'a' .. 'z' ) ) {
    open ( STDOUT, "> $dest/index_$letter.html" );
    print "<HTML>\n";
    print "<HEAD><TITLE>Index $letter</TITLE></HEAD>\n";
    print "<BODY BGCOLOR=$BGCOLOR>\n";
    print "<CENTER><H3><U>Index $letter</U></H3></CENTER>\n";
    print "<FORM><TABLE WIDTH=100%><TR>\n";
    print "<TD ALIGN=LEFT><INPUT TYPE=BUTTON VALUE=\"Main index\"\n";
    print " OnClick=\"location.href='index_main.html'\"><\TD>\n";
    print "</TABLE></FORM>\n";
    foreach $entry ( sort keys %index ) {
	if ( $entry =~ /^$letter\w*/ ) {
	    print "<B>$entry</B>&nbsp;<UL>";
	    foreach $ref ( @{$index{$entry}} ) {
		if ( $ref =~ /(?:cns-)*(.+)\.html#\w+/ ) {
		    $subref = $1;
		}
		else {
		    $subref = $ref;
		}
		print "<A HREF=\"$ref\" TARGET=\"text\">$subref</A>&nbsp;\n";
		$found{$letter} = true;
	    }
	    print "</UL>\n";
	}
    }
    print "<FORM><TABLE WIDTH=100%><TR>\n";
    print "<TD ALIGN=RIGHT><INPUT TYPE=BUTTON VALUE=\"Dismiss\"\n";
    print "       OnClick=\"self.close()\"></TD></TABLE></FORM>\n";
    print "</BODY>\n";
    print "</HTML>\n";
}

open ( STDOUT, "> $dest/index_main.html" );
print "<HTML>\n";
print "<HEAD><TITLE>Main Index</TITLE></HEAD>\n";
print "<BODY BGCOLOR=$BGCOLOR>\n";
print "<CENTER><H3><U>Main Index</U></H3></CENTER>\n";
print "<TABLE WIDTH=100% CELLPADDING=2><TR>\n";
$counter=0;
foreach $letter ( ( 'a' .. 'z' ) ) {
    if ( $found{$letter} eq true ) {
	print "<TD ALIGN=CENTER><A HREF=\"index_${letter}.html\"><FONT SIZE=+2>$letter</FONT></A></TD>\n";
	$counter++;
	if ( $counter % 6 == 0 ) {
	    print "<\TR><TR>\n";
	}
    }
}
print "</TR></TABLE>\n";
print "<FORM><TABLE WIDTH=100%><TR>\n";
print "<TD ALIGN=RIGHT><INPUT TYPE=BUTTON VALUE=\"Dismiss\"\n";
print "       OnClick=\"self.close()\"></TD></TABLE></FORM>\n";
print "</BODY>\n";
print "</HTML>\n";

print STDERR "generating browser\n";

open ( STDOUT, "> $dest/browse_main.html" );
print "<HTML>\n";
print "<HEAD><TITLE>Main Browser</TITLE></HEAD>\n";
print "<BODY BGCOLOR=$BGCOLOR>\n";
print "<CENTER><H3><U>Main Browser</U></H3></CENTER>\n";
print "<FONT SIZE=+1>\n";
print "<LI><A HREF=\"cns.html\" TARGET=\"text\">cns</A><BR>\n";
foreach $other ( @other_files ) {
    print "<LI><A HREF=\"${other}.html\" TARGET=\"text\">$other</A><BR>\n";
}
print "</FONT>";
print "<FORM><TABLE WIDTH=100%><TR>\n";
print "<TD ALIGN=RIGHT><INPUT TYPE=BUTTON VALUE=\"Dismiss\"\n";
print "       OnClick=\"self.close()\"></TD></TABLE></FORM>\n";
print "</BODY>\n";
print "</HTML>\n";

#==========================================================================

sub get_item {

    local ( $line, $depthold ) = @_ ;
    local ( @item, $type, $depth );
    local ( $i, $j, $whitespace );

    $depth=-1;
    @item=();

    if ( $line =~ /^(\s*)<(.+)>\s+:==\s+(.*)\s*/ ) {
	$type=definition;
	$depth=get_depth($1);
	push(@item,$2);
	if ( $3 ) {
	    push(@item,$3);
	}
    }

    elsif ( $line =~ /^\s*$/ ) {
	$type=blank;
    }

    elsif ( $line =~ /^(\s*)--\{(.*)/ ) {
	$type=comment;
	$depth=get_depth($1);
	(@item) = append_text_until(FILE,'}',"   $2");
	for ( $i=1; $i <= $#item; $i++ ) {
	    for ( $j=1; $j<=($depth*2); $j++ ) {
		$item[$i] =~ s/^ (.*)/$1/;
	    }
	}
    }

    elsif ( $line =~ /^(\s*)(\S+.*)\s+\-\-\{(.*)/ ) {
	$type=variable_comment;
	push(@item,$2);
	push(@item,append_text_until(FILE,'}',$3));
    }
    
    elsif ( $line =~ /^(\s*)(\S+.*)/ ) {
	$type=variable;
	$whitespace=length($1)-($depthold*2);
	$line = " " x $whitespace;
	$line .= $2;
	push(@item,$line);
    }

    return ($type, $depth, @item);
    
}

sub get_depth {

    local ( $white_space ) = @_ ;
    local ( $depth );
    
    $depth = length($white_space)/2;

    return $depth;

}

sub append_text_until { 

    local( $stream, $delim, $tmp ) = @_;
    local( @buffer=(), $continue );

    $continue = 1;

    $tmp .= "\n";

    while ($continue) {

	if ( $tmp =~ /^(.*)$delim(.*)$/ ) {
	    push(@buffer,$1);
	    $continue = 0;
	} 
	else {
	    if ( eof && $continue ) {
		print STDERR "runaway comment\n";
		exit 1;
	    }
	    push(@buffer,$tmp);
	    $tmp = <$stream>;
	}
    }
    return(@buffer);
}

sub indent {
    local ( $depth ) = @_;
    local ( $i );

    for ( $i=0; $i < $depth; $i++ ) {
	print "<UL>";
    }
}

sub outdent {
    local ( $depth ) = @_;
    local ( $i );

    if ( $depth > 0 ) {
	for ( $i=0; $i < $depth; $i++ ) {
	    print "</UL>";
	}
    }
    else {
	print "<BR>\n";
    }
    print "\n";
}

sub urlencode {
    local ( @item ) = @_ ;
    local ( $element, @list, $bit );

    foreach $element ( @item ) {
	$element =~ s/\</&lt;/g;
	$element =~ s/\>/&gt;/g;
	$element =~ s/\n/<BR>/g;
	@list = split /( {2,})/ , $element;
	foreach $bit ( @list ) {
	    if ( $bit =~ /^ +$/ ) {
		$bit =~ s/ /&nbsp;/g;
	    }
	}
	$element = join '', @list;
	$element =~ 
	    s/(\&lt\;\w+[-\w]*\&gt\;)/<FONT COLOR=$REFCOLOR>$1<\/FONT>/g;
    }

    return @item;
}

sub index_urlencode {
    local ( @item ) = @_ ;
    local ( $element, @list, $bit );

    foreach $element ( @item ) {
	$element =~ s/\</&lt;/g;
	$element =~ s/\>/&gt;/g;
	$element =~ s/\n/<BR>/g;
	$element = add_to_index ( $element );
	@list = split /( {2,})/ , $element;
	foreach $bit ( @list ) {
	    if ( $bit =~ /^ +$/ ) {
		$bit =~ s/ /&nbsp;/g;
	    }
	}
	$element = join '', @list;
	$element =~ 
	    s/(\&lt\;\w+[-\w]*\&gt\;)/<FONT COLOR=$REFCOLOR>$1<\/FONT>/g;
    }

    return @item;
}

sub triml {
    local ( @item ) = @_ ;
    local ( $line );

    foreach $line ( @item ) {
	$line =~ s/^[ ]+(\w+.*)/$1/;
    }

    return @item;
}

sub add_link {
    local ( @item ) = @_ ;
    local ( $line, $first, $match, $current, $newline, $last );
    local ( $found, $def, @file_defs );
    local ( $file_target, $cns_file, $other );

    foreach $line ( @item ) {
	$current = $line;
	$newline = '';
	$last = '';
	if ( $current =~ /^(.*)(\&lt\;\w+[-\w]*\&gt\;)(.*)/ ) {
	    while ( $current =~ /^(.*)\&lt\;(\w+[-\w]*)\&gt\;(.*)/ ) {
		$first = $1; $target = $2; $last = $3;
		$match = '&lt;' . $target . '&gt;';
		$found=0;
		foreach $def ( @definitions ) {
		    if ( $target eq $def ) {
			$match =~ s/$match/<A HREF="#$target">$match<\/A>/;
			$found=1;
		    }
		}
		if ( ! $found && ( $target =~ /-statement/ ) ) {
		    $file_target = 'cns-' . $target;
		    $file_target =~ s/\-statement$//;
		    foreach $cns_file ( @help_files ) {
			if ( $file_target eq $cns_file ) {
			    $match =~ s/$match/<A HREF="${file_target}.html#$target">$match<\/A>/;
			    $found=1;
			}
		    }
		}
		if ( ! $found ) {
		    foreach $other ( @other_files ) {
			@file_defs = get_defs_from_file($other);
			foreach $def ( @file_defs ) {
			    if ( $target eq $def ) {
				$match =~ s/$match/<A HREF="${other}.html#$target">$match<\/A>/;
				$found=1;
			    }
			}
		    }
		}
		$newline = $match . $last . $newline;
		$current = $first;
	    }
	    $newline = $first . $newline;
	    $line = $newline;
	}
    }
    return @item;
}

sub get_defs_from_file {
    local ( $file ) = @_ ;
    local ( @defs, $line );

    @defs = ();

    open( TMP, "< $source/${file}" );
    while ( $line = <TMP> ) {
	if ( $line =~ /^(\s*)<(.+)>\s+:==\s+(.*)\s*/ ) {
	    push (@defs, $2);
	}
    }
    close TMP;

    return @defs;
}

sub get_dir_list {
    local ( $directory ) = @_;
    local ( $file, @files );

    open( LS, "ls $directory |" );

    @files=();
    while ( $file = <LS> ) {
	$file =~ s/\n//g;
	push (@files,$file);
    }

    close LS;

    return @files;
}

sub get_args {
    local ( $source, $dest );
    local ( $i, $arg );

    $source='';
    $dest='';

    for ( $i=0; $i<=$#ARGV; $i++ ) {
	$arg = $ARGV[$i];
	if ( $arg =~ /-source[=]*(\S*)/ ) {
	    if ( $1 ) {
		$source=$1;
	    }
	    else {
		$i++;
		$source=$ARGV[$i];
	    }
	}
	if ( $arg =~ /-dest[=]*(\S*)/ ) {
	    if ( $1 ) {
		$dest=$1;
	    }
	    else {
		$i++;
		$dest=$ARGV[$i];
	    }
	}
    }
    if ( $source =~ /^\s*$/ ) {
	print STDERR "source directory not specified\n";
	exit 1;
    }
    elsif ( $dest =~ /^\s*$/ ) {
	print STDERR "destination directory not specified\n";
	exit 1;
    }
    else {
	return ($source, $dest);
    }
}

sub add_to_index {
    local ( $line ) = @_ ;
    local ( @fields, $entry, $ref, $number );

    @fields = split /([\]\[\(=| ])/ , $line;
    foreach $entry ( @fields ) {
	if ( $entry =~ /^(\w+)$/ && $entry !~ /^end$/ ) {
	    $ref = $1;
	    if ( $ref !~ /^\w{1}$/ && $ref !~ /^\d{1,}$/ ) {
		if ( $file !~ /-$ref$/ ) {
		    $number = $#{$index{$ref}} + 1;
		    $entry = "<A NAME=\"${ref}${number}\">$ref</A>";
		    push ( @{$index{$ref}} , "${file}.html#${ref}${number}" );
		}
	    }
	}
    }
    $line = join '', @fields;

    return $line;
}

sub check_version {

    if ( $] < 5.000 ) {
	print "current PERL version is: $]\n";
	die "PERL version 5 or higher is required\n";
    }

}